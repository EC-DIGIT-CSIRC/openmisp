{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenMISP Documentation","text":"<p>Welcome to the OpenMISP documentation. This SDK provides a powerful and intuitive interface for interacting with MISP (Malware Information Sharing Platform) instances.</p>"},{"location":"#overview","title":"Overview","text":"<p>OpenMISP is a Python library that simplifies the interaction with MISP instances. It provides a clean, modern API for managing MISP events, attributes, objects, and other MISP features.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Intuitive API: Simple and consistent API design for all MISP operations</li> <li>Type Safety: Strong typing support for better code reliability</li> <li>Modern Python: Built with modern Python features and best practices</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import os\nfrom openmisp.sdk import MISP, EventCriteria, AttributeType\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production\n)\n\n# Check server health\nhealthcheck = misp.server.healthcheck()\nprint(f\"Healthcheck: {healthcheck}\")\n\n# List published events\nfor event in misp.list(EventCriteria(published=True)):\n    print(f\"Event: {event.info}\")\n\n# Create and link attributes\nattribute = misp.attributes.create(\n    value=\"8.8.8.8\",\n    type=AttributeType.IP_DST,\n    detection=True,\n    correlation=True,\n)\nmisp.events.link(event, attribute)\nmisp.sync(event)\n</code></pre>"},{"location":"#quick-access","title":"Quick Access","text":"<ul> <li>Installation Guide</li> <li>Quick Start Guide</li> <li>Methods Overview</li> <li>Attribute Reference</li> <li>Example Usage</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>MISP instance (2.4.x or later)</li> <li>API key from your MISP instance</li> </ul>"},{"location":"SUMMARY/","title":"OpenMISP Documentation","text":"<ul> <li>Home</li> <li>Getting Started<ul> <li>Installation</li> <li>Quick Start</li> <li>Methods Overview</li> </ul> </li> <li>Reference<ul> <li>MISP</li> <li>Events</li> <li>Attributes</li> <li>Objects</li> <li>Tags</li> <li>Galaxies</li> <li>Clusters</li> <li>Organizations</li> <li>Sharing Groups</li> <li>Server</li> </ul> </li> <li>Examples<ul> <li>Basic Usage</li> </ul> </li> </ul>"},{"location":"api-reference/","title":"API Reference","text":"<p>This section contains the automatically generated API reference documentation for the OpenMISP.</p> <p>The documentation is generated directly from the source code using docstrings and type hints.</p>"},{"location":"api-reference/#modules","title":"Modules","text":"<ul> <li>Attributes</li> <li>Clusters</li> <li>Events</li> <li>Galaxies</li> <li>Misp</li> <li>Objects</li> <li>Organizations</li> <li>Server</li> <li>Sharing Groups</li> <li>Sightings</li> <li>Tags</li> <li>Taxonomies</li> <li>Validators</li> </ul>"},{"location":"api-reference/attributes/","title":"Attributes API Reference","text":"<p>This page contains the automatically generated API reference for the attributes module.</p>"},{"location":"api-reference/attributes/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/attributes/#openmisp.sdk.attributes","title":"<code>openmisp.sdk.attributes</code>","text":""},{"location":"api-reference/attributes/#openmisp.sdk.attributes-functions","title":"Functions","text":""},{"location":"api-reference/clusters/","title":"Clusters API Reference","text":"<p>This page contains the automatically generated API reference for the clusters module.</p>"},{"location":"api-reference/clusters/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/clusters/#openmisp.sdk.clusters","title":"<code>openmisp.sdk.clusters</code>","text":""},{"location":"api-reference/clusters/#openmisp.sdk.clusters-functions","title":"Functions","text":""},{"location":"api-reference/events/","title":"Events API Reference","text":"<p>This page contains the automatically generated API reference for the events module.</p>"},{"location":"api-reference/events/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/events/#openmisp.sdk.events","title":"<code>openmisp.sdk.events</code>","text":""},{"location":"api-reference/events/#openmisp.sdk.events-classes","title":"Classes","text":""},{"location":"api-reference/events/#openmisp.sdk.events.EventService","title":"<code>EventService(client: PyMISP)</code>","text":"<p>Service for managing MISP events.</p> <p>This service provides methods for creating, retrieving, updating, and deleting MISP events, as well as linking and unlinking entities to events.</p> <p>Attributes:</p> Name Type Description <code>_client</code> <p>The PyMISP client instance.</p> <code>_attributes_service</code> <p>The attributes service instance.</p> <code>_objects_service</code> <p>The objects service instance.</p> <code>_tags_service</code> <p>The tags service instance.</p> <code>_clusters_service</code> <p>The clusters service instance.</p> Source code in <code>src/openmisp/sdk/events.py</code> <pre><code>def __init__(self, client: PyMISP):\n    validate_client(client, raise_error=True)\n    self._client = client\n    self._attributes_service = AttributeService(client)\n    self._objects_service = ObjectService(client)\n    self._tags_service = TagService(client)\n    self._clusters_service = ClusterService(client)\n</code></pre>"},{"location":"api-reference/events/#openmisp.sdk.events.EventService-functions","title":"Functions","text":""},{"location":"api-reference/events/#openmisp.sdk.events.EventService.create","title":"<code>create(*, info: str, published: bool, distribution: Distribution, threat_level: ThreatLevel, analysis: Analysis, organization: MISPOrganisation | None = None, sharing_group: MISPSharingGroup | None = None, date: datetime | None = None, attributes: list[MISPAttribute] | None = None, objects: list[MISPObject] | None = None) -&gt; MISPEvent</code>","text":"<p>Create a new MISP event.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>str</code> <p>Event description.</p> required <code>published</code> <code>bool</code> <p>Whether the event is published.</p> required <code>distribution</code> <code>Distribution</code> <p>Distribution level enum.</p> required <code>threat_level</code> <code>ThreatLevel</code> <p>Threat level enum.</p> required <code>analysis</code> <code>Analysis</code> <p>Analysis state enum.</p> required <code>organization</code> <code>MISPOrganisation | None</code> <p>Organization creating the event.</p> <code>None</code> <code>sharing_group</code> <code>MISPSharingGroup | None</code> <p>Sharing group for the event.</p> <code>None</code> <code>date</code> <code>datetime | None</code> <p>Event date.</p> <code>None</code> <code>attributes</code> <code>list[MISPAttribute] | None</code> <p>List of attributes to link to the event.</p> <code>None</code> <code>objects</code> <code>list[MISPObject] | None</code> <p>List of objects to link to the event.</p> <code>None</code> <p>Returns:</p> Type Description <code>MISPEvent</code> <p>The created MISP event object.</p> <p>Raises:</p> Type Description <code>MISPValidationError</code> <p>If the event data is invalid.</p> <code>MISPError</code> <p>If there's an error communicating with the MISP server.</p> Source code in <code>src/openmisp/sdk/events.py</code> <pre><code>def create(\n    self,\n    *,\n    info: str,\n    published: bool,\n    distribution: Distribution,\n    threat_level: ThreatLevel,\n    analysis: Analysis,\n    organization: MISPOrganisation | None = None,\n    sharing_group: MISPSharingGroup | None = None,\n    date: datetime | None = None,\n    attributes: list[MISPAttribute] | None = None,\n    objects: list[MISPObject] | None = None,\n) -&gt; MISPEvent:\n    \"\"\"Create a new MISP event.\n\n    Args:\n        info: Event description.\n        published: Whether the event is published.\n        distribution: Distribution level enum.\n        threat_level: Threat level enum.\n        analysis: Analysis state enum.\n        organization: Organization creating the event.\n        sharing_group: Sharing group for the event.\n        date: Event date.\n        attributes: List of attributes to link to the event.\n        objects: List of objects to link to the event.\n\n    Returns:\n        The created MISP event object.\n\n    Raises:\n        MISPValidationError: If the event data is invalid.\n        MISPError: If there's an error communicating with the MISP server.\n    \"\"\"\n    validate_required_parameter(info, \"info\")\n    validate_required_parameter(published, \"published\")\n    validate_required_parameter(distribution, \"distribution\")\n    validate_required_parameter(threat_level, \"threat_level\")\n    validate_required_parameter(analysis, \"analysis\")\n\n    validate_string(info, \"info\", raise_error=True)\n    validate_boolean(published, \"published\", raise_error=True)\n    validate_entity_type(distribution, Distribution, \"distribution\", raise_error=True)\n    validate_entity_type(threat_level, ThreatLevel, \"threat_level\", raise_error=True)\n    validate_entity_type(analysis, Analysis, \"analysis\", raise_error=True)\n    validate_entity_type(organization, MISPOrganisation, \"organization\", raise_error=True)\n    validate_entity_type(sharing_group, MISPSharingGroup, \"sharing_group\", raise_error=True)\n    validate_datetime(date, \"date\", raise_error=True)\n    validate_distribution_sharing_group(distribution, sharing_group, raise_error=True)\n\n    event = MISPEvent()\n    event.info = info\n    event.published = published\n    event.distribution = distribution.value\n    event.threat_level_id = threat_level.value\n    event.analysis = analysis.value\n    if organization is not None:\n        event.orgc_id = organization.id\n    if sharing_group is not None:\n        event.sharing_group_id = sharing_group.id\n    if date is not None:\n        event.date = date\n\n    if attributes:\n        for attribute in attributes:\n            self._attributes_service._parent_link(event, attribute)\n\n    if objects:\n        for obj in objects:\n            self._objects_service._parent_link(event, obj)\n\n    return event\n</code></pre>"},{"location":"api-reference/events/#openmisp.sdk.events-functions","title":"Functions","text":""},{"location":"api-reference/galaxies/","title":"Galaxies API Reference","text":"<p>This page contains the automatically generated API reference for the galaxies module.</p>"},{"location":"api-reference/galaxies/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/galaxies/#openmisp.sdk.galaxies","title":"<code>openmisp.sdk.galaxies</code>","text":""},{"location":"api-reference/galaxies/#openmisp.sdk.galaxies-functions","title":"Functions","text":""},{"location":"api-reference/misp/","title":"Misp API Reference","text":"<p>This page contains the automatically generated API reference for the misp module.</p>"},{"location":"api-reference/misp/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/misp/#openmisp.sdk.misp","title":"<code>openmisp.sdk.misp</code>","text":""},{"location":"api-reference/misp/#openmisp.sdk.misp-classes","title":"Classes","text":""},{"location":"api-reference/misp/#openmisp.sdk.misp-functions","title":"Functions","text":""},{"location":"api-reference/objects/","title":"Objects API Reference","text":"<p>This page contains the automatically generated API reference for the objects module.</p>"},{"location":"api-reference/objects/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/objects/#openmisp.sdk.objects","title":"<code>openmisp.sdk.objects</code>","text":""},{"location":"api-reference/objects/#openmisp.sdk.objects-classes","title":"Classes","text":""},{"location":"api-reference/objects/#openmisp.sdk.objects.ObjectService","title":"<code>ObjectService(client: PyMISP)</code>","text":"Source code in <code>src/openmisp/sdk/objects.py</code> <pre><code>def __init__(self, client: PyMISP):\n    self._client = client\n    self._attributes_service = AttributeService(client)\n    self._tags_service = TagService(client)\n    self._clusters_service = ClusterService(client)\n</code></pre>"},{"location":"api-reference/objects/#openmisp.sdk.objects.ObjectService-functions","title":"Functions","text":""},{"location":"api-reference/objects/#openmisp.sdk.objects.ObjectService.create","title":"<code>create(*, type: ObjectType)</code>","text":"<p>Create a new MISP object.</p> Source code in <code>src/openmisp/sdk/objects.py</code> <pre><code>def create(self, *, type: ObjectType):\n    \"\"\"Create a new MISP object.\"\"\"\n    validate_entity_type(type, ObjectType, \"type\", raise_error=True)\n\n    obj = MISPObject(name=type.value, strict=True, standalone=False)\n    return obj\n</code></pre>"},{"location":"api-reference/objects/#openmisp.sdk.objects.ObjectService.list","title":"<code>list(entity: MISPEvent, criteria: ObjectCriteria)</code>","text":"<p>List MISP objects.</p> Source code in <code>src/openmisp/sdk/objects.py</code> <pre><code>def list(self, entity: MISPEvent, criteria: ObjectCriteria):\n    \"\"\"List MISP objects.\"\"\"\n    validate_entity_type(entity, MISPEvent, \"entity\", raise_error=True)\n\n    objects = []\n    for obj in entity.objects:\n        if criteria.name and obj.name != criteria.name:\n            continue\n        objects.append(obj)\n    return objects\n</code></pre>"},{"location":"api-reference/objects/#openmisp.sdk.objects.ObjectService.get","title":"<code>get(entity: MISPEvent, criteria: ObjectCriteria)</code>","text":"<p>Get a MISP object.</p> Source code in <code>src/openmisp/sdk/objects.py</code> <pre><code>def get(self, entity: MISPEvent, criteria: ObjectCriteria):\n    \"\"\"Get a MISP object.\"\"\"\n    validate_entity_type(entity, MISPEvent, \"entity\", raise_error=True)\n\n    return next((obj for obj in self.list(entity, criteria)), None)\n</code></pre>"},{"location":"api-reference/objects/#openmisp.sdk.objects.ObjectService.exists","title":"<code>exists(entity: MISPEvent, criteria: ObjectCriteria)</code>","text":"<p>Check if a MISP object exists.</p> Source code in <code>src/openmisp/sdk/objects.py</code> <pre><code>def exists(self, entity: MISPEvent, criteria: ObjectCriteria):\n    \"\"\"Check if a MISP object exists.\"\"\"\n    validate_entity_type(entity, MISPEvent, \"entity\", raise_error=True)\n\n    return self.get(entity, criteria) is not None\n</code></pre>"},{"location":"api-reference/objects/#openmisp.sdk.objects.ObjectService.link","title":"<code>link(obj: MISPObject, entity: MISPObjectAttribute)</code>","text":"<p>Link an entity to an object.</p> Source code in <code>src/openmisp/sdk/objects.py</code> <pre><code>def link(self, obj: MISPObject, entity: MISPObjectAttribute):\n    \"\"\"Link an entity to an object.\"\"\"\n    validate_entity_type(entity, MISPObjectAttribute, \"entity\", raise_error=True)\n\n    return self._attributes_service._parent_link(obj, entity)\n</code></pre>"},{"location":"api-reference/objects/#openmisp.sdk.objects.ObjectService.unlink","title":"<code>unlink(obj: MISPObject, entity: MISPObjectAttribute)</code>","text":"<p>Unlink an entity from an object.</p> Source code in <code>src/openmisp/sdk/objects.py</code> <pre><code>def unlink(self, obj: MISPObject, entity: MISPObjectAttribute):\n    \"\"\"Unlink an entity from an object.\"\"\"\n    validate_entity_type(entity, MISPObjectAttribute, \"entity\", raise_error=True)\n\n    return self._attributes_service._parent_unlink(obj, entity)\n</code></pre>"},{"location":"api-reference/objects/#openmisp.sdk.objects-functions","title":"Functions","text":""},{"location":"api-reference/organizations/","title":"Organizations API Reference","text":"<p>This page contains the automatically generated API reference for the organizations module.</p>"},{"location":"api-reference/organizations/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/organizations/#openmisp.sdk.organizations","title":"<code>openmisp.sdk.organizations</code>","text":""},{"location":"api-reference/organizations/#openmisp.sdk.organizations-functions","title":"Functions","text":""},{"location":"api-reference/server/","title":"Server API Reference","text":"<p>This page contains the automatically generated API reference for the server module.</p>"},{"location":"api-reference/server/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/server/#openmisp.sdk.server","title":"<code>openmisp.sdk.server</code>","text":""},{"location":"api-reference/server/#openmisp.sdk.server-functions","title":"Functions","text":""},{"location":"api-reference/sharing_groups/","title":"Sharing Groups API Reference","text":"<p>This page contains the automatically generated API reference for the sharing_groups module.</p>"},{"location":"api-reference/sharing_groups/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/sharing_groups/#openmisp.sdk.sharing_groups","title":"<code>openmisp.sdk.sharing_groups</code>","text":""},{"location":"api-reference/sharing_groups/#openmisp.sdk.sharing_groups-functions","title":"Functions","text":""},{"location":"api-reference/sightings/","title":"Sightings API Reference","text":"<p>This page contains the automatically generated API reference for the sightings module.</p>"},{"location":"api-reference/sightings/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/sightings/#openmisp.sdk.sightings","title":"<code>openmisp.sdk.sightings</code>","text":""},{"location":"api-reference/sightings/#openmisp.sdk.sightings-functions","title":"Functions","text":""},{"location":"api-reference/tags/","title":"Tags API Reference","text":"<p>This page contains the automatically generated API reference for the tags module.</p>"},{"location":"api-reference/tags/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/tags/#openmisp.sdk.tags","title":"<code>openmisp.sdk.tags</code>","text":""},{"location":"api-reference/tags/#openmisp.sdk.tags-functions","title":"Functions","text":""},{"location":"api-reference/taxonomies/","title":"Taxonomies API Reference","text":"<p>This page contains the automatically generated API reference for the taxonomies module.</p>"},{"location":"api-reference/taxonomies/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/taxonomies/#openmisp.sdk.taxonomies","title":"<code>openmisp.sdk.taxonomies</code>","text":""},{"location":"api-reference/taxonomies/#openmisp.sdk.taxonomies-functions","title":"Functions","text":""},{"location":"api-reference/validators/","title":"Validators API Reference","text":"<p>This page contains the automatically generated API reference for the validators module.</p>"},{"location":"api-reference/validators/#module-reference","title":"Module Reference","text":""},{"location":"api-reference/validators/#openmisp.sdk.validators","title":"<code>openmisp.sdk.validators</code>","text":""},{"location":"api-reference/validators/#openmisp.sdk.validators-functions","title":"Functions","text":""},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_client","title":"<code>validate_client(client: Any, raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that the client is an instance of PyMISP.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Any</code> <p>The client to validate</p> required <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the client is valid, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not an instance of PyMISP and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_client(client: Any, raise_error: bool = False) -&gt; bool:\n    \"\"\"\n    Validate that the client is an instance of PyMISP.\n\n    Args:\n        client: The client to validate\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the client is valid, False otherwise\n\n    Raises:\n        ValueError: If the client is not an instance of PyMISP and raise_error is True\n    \"\"\"\n    is_valid = isinstance(client, PyMISP)\n    if not is_valid and raise_error:\n        raise ValueError(\"Client must be an instance of PyMISP.\")\n    return is_valid\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_type_for_category","title":"<code>validate_type_for_category(category: AttributeCategory, type: AttributeType, raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that an attribute type is allowed for a specific category.</p> <p>Parameters:</p> Name Type Description Default <code>category</code> <code>AttributeCategory</code> <p>The attribute category to validate against</p> required <code>type</code> <code>AttributeType</code> <p>The attribute type to validate</p> required <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the type is valid for the category, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the type is not valid for the category and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_type_for_category(category: AttributeCategory, type: AttributeType, raise_error: bool = False) -&gt; bool:\n    \"\"\"\n    Validate that an attribute type is allowed for a specific category.\n\n    Args:\n        category: The attribute category to validate against\n        type: The attribute type to validate\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the type is valid for the category, False otherwise\n\n    Raises:\n        ValueError: If the type is not valid for the category and raise_error is True\n    \"\"\"\n    if category not in CATEGORY_TYPE_MAPPING:\n        if raise_error:\n            raise ValueError(f\"Category {category.value} is not valid.\")\n        return False\n\n    is_valid = type in CATEGORY_TYPE_MAPPING[category]\n    if not is_valid and raise_error:\n        raise ValueError(f\"Type {type.value} is not valid for category {category.value}.\")\n    return is_valid\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_relation_type_for_object","title":"<code>validate_relation_type_for_object(object_type: ObjectType, relation: ObjectRelation, attribute_type: AttributeType, raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that the given relation and attribute type are valid for the object type.</p> <p>Parameters:</p> Name Type Description Default <code>object_type</code> <code>ObjectType</code> <p>The object type to validate against</p> required <code>relation</code> <code>ObjectRelation</code> <p>The relation to validate</p> required <code>attribute_type</code> <code>AttributeType</code> <p>The attribute type to validate</p> required <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the relation and attribute type are valid for the object type, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the relation and attribute type are not valid for the object type and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_relation_type_for_object(\n    object_type: ObjectType, relation: ObjectRelation, attribute_type: AttributeType, raise_error: bool = False\n) -&gt; bool:\n    \"\"\"\n    Validate that the given relation and attribute type are valid for the object type.\n\n    Args:\n        object_type: The object type to validate against\n        relation: The relation to validate\n        attribute_type: The attribute type to validate\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the relation and attribute type are valid for the object type, False otherwise\n\n    Raises:\n        ValueError: If the relation and attribute type are not valid for the object type and raise_error is True\n    \"\"\"\n    if object_type not in OBJECT_RELATION_ATTRIBUTE_MAPPING:\n        if raise_error:\n            raise ValueError(f\"Object type {object_type.value} is not valid.\")\n        return False\n\n    object_relations = OBJECT_RELATION_ATTRIBUTE_MAPPING[object_type]\n    if relation not in object_relations:\n        if raise_error:\n            raise ValueError(f\"Relation {relation.value} is not valid for object type {object_type.value}.\")\n        return False\n\n    is_valid = object_relations[relation] == attribute_type\n    if not is_valid and raise_error:\n        raise ValueError(\n            f\"Relation {relation.value} with type {attribute_type.value} is not valid for object type {object_type.value}.\"\n        )\n    return is_valid\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_entity_type","title":"<code>validate_entity_type(entity: Any, expected_types: Union[Type, List[Type]], param_name: str = 'entity', raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that an entity is of the expected type(s).</p> <p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Any</code> <p>The entity to validate</p> required <code>expected_types</code> <code>Union[Type, List[Type]]</code> <p>The expected type(s) of the entity</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to use in the error message</p> <code>'entity'</code> <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the entity is of the expected type(s), False otherwise</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the entity is not of the expected type(s) and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_entity_type(\n    entity: Any, expected_types: Union[Type, List[Type]], param_name: str = \"entity\", raise_error: bool = False\n) -&gt; bool:\n    \"\"\"\n    Validate that an entity is of the expected type(s).\n\n    Args:\n        entity: The entity to validate\n        expected_types: The expected type(s) of the entity\n        param_name: The name of the parameter to use in the error message\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the entity is of the expected type(s), False otherwise\n\n    Raises:\n        TypeError: If the entity is not of the expected type(s) and raise_error is True\n    \"\"\"\n    if entity is None:\n        return True\n\n    if isinstance(expected_types, list):\n        is_valid = any(isinstance(entity, t) for t in expected_types)\n        if not is_valid and raise_error:\n            type_names = \" or \".join([t.__name__ for t in expected_types])\n            raise TypeError(f\"{param_name} must be an instance of {type_names}.\")\n        return is_valid\n\n    is_valid = isinstance(entity, expected_types)\n    if not is_valid and raise_error:\n        if isinstance(expected_types, tuple):\n            type_names = \" or \".join([t.__name__ for t in expected_types])\n            raise TypeError(f\"{param_name} must be an instance of {type_names}.\")\n        else:\n            raise TypeError(f\"{param_name} must be an instance of {expected_types.__name__}.\")\n    return is_valid\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_model","title":"<code>validate_model(model: BaseModel, raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that a model is valid according to its Pydantic schema.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>BaseModel</code> <p>The model to validate</p> required <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the model is valid, False otherwise</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the model is not valid and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_model(model: BaseModel, raise_error: bool = False) -&gt; bool:\n    \"\"\"\n    Validate that a model is valid according to its Pydantic schema.\n\n    Args:\n        model: The model to validate\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the model is valid, False otherwise\n\n    Raises:\n        ValidationError: If the model is not valid and raise_error is True\n    \"\"\"\n    if model is None:\n        return True\n\n    try:\n        model.validate(model.dict())\n        return True\n    except ValidationError as e:\n        if raise_error:\n            raise e\n        return False\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_distribution_sharing_group","title":"<code>validate_distribution_sharing_group(distribution: Distribution, sharing_group: Optional[MISPSharingGroup] = None, raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that the distribution and sharing group are compatible.</p> <p>Parameters:</p> Name Type Description Default <code>distribution</code> <code>Distribution</code> <p>The distribution to validate</p> required <code>sharing_group</code> <code>Optional[MISPSharingGroup]</code> <p>The sharing group to validate</p> <code>None</code> <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the distribution and sharing group are compatible, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the distribution and sharing group are not compatible and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_distribution_sharing_group(\n    distribution: Distribution, sharing_group: Optional[MISPSharingGroup] = None, raise_error: bool = False\n) -&gt; bool:\n    \"\"\"\n    Validate that the distribution and sharing group are compatible.\n\n    Args:\n        distribution: The distribution to validate\n        sharing_group: The sharing group to validate\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the distribution and sharing group are compatible, False otherwise\n\n    Raises:\n        ValueError: If the distribution and sharing group are not compatible and raise_error is True\n    \"\"\"\n    if distribution is None:\n        return True\n\n    # If distribution is set to sharing group, a sharing group must be provided\n    if distribution == Distribution.SHARING_GROUP and sharing_group is None:\n        if raise_error:\n            raise ValueError(\"Sharing group must be provided when distribution is set to sharing group.\")\n        return False\n\n    # If distribution is not set to sharing group, a sharing group should not be provided\n    if distribution != Distribution.SHARING_GROUP and sharing_group is not None:\n        if raise_error:\n            raise ValueError(\"Sharing group should not be provided when distribution is not set to sharing group.\")\n        return False\n\n    return True\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_required_parameter","title":"<code>validate_required_parameter(param: Any, param_name: str, raise_error: bool = True) -&gt; bool</code>","text":"<p>Validate that a required parameter is not None.</p> <p>Parameters:</p> Name Type Description Default <code>param</code> <code>Any</code> <p>The parameter to validate</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to use in the error message</p> required <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the parameter is not None, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the parameter is None and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_required_parameter(param: Any, param_name: str, raise_error: bool = True) -&gt; bool:\n    \"\"\"\n    Validate that a required parameter is not None.\n\n    Args:\n        param: The parameter to validate\n        param_name: The name of the parameter to use in the error message\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the parameter is not None, False otherwise\n\n    Raises:\n        ValueError: If the parameter is None and raise_error is True\n    \"\"\"\n    is_valid = param is not None\n    if not is_valid and raise_error:\n        raise ValueError(f\"{param_name} is required.\")\n    return is_valid\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_criteria_type","title":"<code>validate_criteria_type(criteria: Any, expected_type: Type, criteria_name: str = 'criteria', raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that a criteria object is of the expected type.</p> <p>Parameters:</p> Name Type Description Default <code>criteria</code> <code>Any</code> <p>The criteria to validate</p> required <code>expected_type</code> <code>Type</code> <p>The expected type of the criteria</p> required <code>criteria_name</code> <code>str</code> <p>The name of the criteria to use in the error message</p> <code>'criteria'</code> <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the criteria is of the expected type, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the criteria is not of the expected type and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_criteria_type(\n    criteria: Any, expected_type: Type, criteria_name: str = \"criteria\", raise_error: bool = False\n) -&gt; bool:\n    \"\"\"\n    Validate that a criteria object is of the expected type.\n\n    Args:\n        criteria: The criteria to validate\n        expected_type: The expected type of the criteria\n        criteria_name: The name of the criteria to use in the error message\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the criteria is of the expected type, False otherwise\n\n    Raises:\n        ValueError: If the criteria is not of the expected type and raise_error is True\n    \"\"\"\n    if criteria is None:\n        return True\n\n    is_valid = isinstance(criteria, expected_type)\n    if not is_valid and raise_error:\n        raise ValueError(f\"{criteria_name} must be an instance of {expected_type.__name__}.\")\n    return is_valid\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_same_type","title":"<code>validate_same_type(current: Any, new: Any, error_message: Optional[str] = None, raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that two objects are of the same type.</p> <p>Parameters:</p> Name Type Description Default <code>current</code> <code>Any</code> <p>The current object</p> required <code>new</code> <code>Any</code> <p>The new object</p> required <code>error_message</code> <code>Optional[str]</code> <p>Optional custom error message</p> <code>None</code> <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the objects are of the same type, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the objects are not of the same type and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_same_type(current: Any, new: Any, error_message: Optional[str] = None, raise_error: bool = False) -&gt; bool:\n    \"\"\"\n    Validate that two objects are of the same type.\n\n    Args:\n        current: The current object\n        new: The new object\n        error_message: Optional custom error message\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the objects are of the same type, False otherwise\n\n    Raises:\n        ValueError: If the objects are not of the same type and raise_error is True\n    \"\"\"\n    if current is None or new is None:\n        return True\n\n    is_valid = isinstance(current, type(new))\n    if not is_valid and raise_error:\n        if error_message:\n            raise ValueError(error_message)\n        else:\n            raise ValueError(f\"Cannot sync {type(current).__name__} with {type(new).__name__}.\")\n    return is_valid\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_datetime","title":"<code>validate_datetime(dt: Any, param_name: str = 'datetime', require_timezone: bool = True, raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that a parameter is a valid datetime object.</p> <p>Parameters:</p> Name Type Description Default <code>dt</code> <code>Any</code> <p>The datetime to validate</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to use in the error message</p> <code>'datetime'</code> <code>require_timezone</code> <code>bool</code> <p>Whether to require the datetime to have a timezone</p> <code>True</code> <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the parameter is a valid datetime object, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the parameter is not a valid datetime object and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_datetime(\n    dt: Any, param_name: str = \"datetime\", require_timezone: bool = True, raise_error: bool = False\n) -&gt; bool:\n    \"\"\"\n    Validate that a parameter is a valid datetime object.\n\n    Args:\n        dt: The datetime to validate\n        param_name: The name of the parameter to use in the error message\n        require_timezone: Whether to require the datetime to have a timezone\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the parameter is a valid datetime object, False otherwise\n\n    Raises:\n        ValueError: If the parameter is not a valid datetime object and raise_error is True\n    \"\"\"\n    if dt is None:\n        return True\n\n    from datetime import datetime\n\n    is_valid_type = isinstance(dt, datetime)\n    if not is_valid_type:\n        if raise_error:\n            raise ValueError(f\"{param_name} must be a datetime object.\")\n        return False\n\n    has_timezone = dt.tzinfo is not None\n    if require_timezone and not has_timezone:\n        if raise_error:\n            raise ValueError(f\"{param_name} must have a timezone.\")\n        return False\n\n    return True\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_string","title":"<code>validate_string(value: Any, param_name: str = 'string', raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that a parameter is a string.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to validate</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to use in the error message</p> <code>'string'</code> <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the parameter is a string, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the parameter is not a string and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_string(value: Any, param_name: str = \"string\", raise_error: bool = False) -&gt; bool:\n    \"\"\"\n    Validate that a parameter is a string.\n\n    Args:\n        value: The value to validate\n        param_name: The name of the parameter to use in the error message\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the parameter is a string, False otherwise\n\n    Raises:\n        ValueError: If the parameter is not a string and raise_error is True\n    \"\"\"\n    if value is None:\n        return True\n\n    is_valid = isinstance(value, str)\n    if not is_valid and raise_error:\n        raise ValueError(f\"{param_name} must be a string.\")\n    return is_valid\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_boolean","title":"<code>validate_boolean(value: Any, param_name: str = 'boolean', raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that a parameter is a boolean.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to validate</p> required <code>param_name</code> <code>str</code> <p>The name of the parameter to use in the error message</p> <code>'boolean'</code> <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the parameter is a boolean, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the parameter is not a boolean and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_boolean(value: Any, param_name: str = \"boolean\", raise_error: bool = False) -&gt; bool:\n    \"\"\"\n    Validate that a parameter is a boolean.\n\n    Args:\n        value: The value to validate\n        param_name: The name of the parameter to use in the error message\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the parameter is a boolean, False otherwise\n\n    Raises:\n        ValueError: If the parameter is not a boolean and raise_error is True\n    \"\"\"\n    if value is None:\n        return True\n\n    is_valid = isinstance(value, bool)\n    if not is_valid and raise_error:\n        raise ValueError(f\"{param_name} must be a boolean.\")\n    return is_valid\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_list_item_types","title":"<code>validate_list_item_types(items: List[Any], expected_type: Type, list_name: str = 'list', raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that all items in a list are of the expected type.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>List[Any]</code> <p>The list of items to validate</p> required <code>expected_type</code> <code>Type</code> <p>The expected type of the items</p> required <code>list_name</code> <code>str</code> <p>The name of the list to use in the error message</p> <code>'list'</code> <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if all items in the list are of the expected type, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any item in the list is not of the expected type and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_list_item_types(\n    items: List[Any], expected_type: Type, list_name: str = \"list\", raise_error: bool = False\n) -&gt; bool:\n    \"\"\"\n    Validate that all items in a list are of the expected type.\n\n    Args:\n        items: The list of items to validate\n        expected_type: The expected type of the items\n        list_name: The name of the list to use in the error message\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if all items in the list are of the expected type, False otherwise\n\n    Raises:\n        ValueError: If any item in the list is not of the expected type and raise_error is True\n    \"\"\"\n    if items is None:\n        return True\n\n    for i, item in enumerate(items):\n        if not isinstance(item, expected_type):\n            if raise_error:\n                raise ValueError(f\"Item at index {i} in {list_name} must be an instance of {expected_type.__name__}.\")\n            return False\n\n    return True\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_attribute_relation_for_object_type","title":"<code>validate_attribute_relation_for_object_type(attribute: MISPObjectAttribute, obj: MISPObject, raise_error: bool = False) -&gt; bool</code>","text":"<p>Validate that an attribute's relation is valid for an object's type.</p> <p>Parameters:</p> Name Type Description Default <code>attribute</code> <code>MISPObjectAttribute</code> <p>The attribute to validate</p> required <code>obj</code> <code>MISPObject</code> <p>The object to validate against</p> required <code>raise_error</code> <code>bool</code> <p>Whether to raise an error if validation fails</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the attribute's relation is valid for the object's type, False otherwise</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the attribute's relation is not valid for the object's type and raise_error is True</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_attribute_relation_for_object_type(\n    attribute: MISPObjectAttribute, obj: MISPObject, raise_error: bool = False\n) -&gt; bool:\n    \"\"\"\n    Validate that an attribute's relation is valid for an object's type.\n\n    Args:\n        attribute: The attribute to validate\n        obj: The object to validate against\n        raise_error: Whether to raise an error if validation fails\n\n    Returns:\n        True if the attribute's relation is valid for the object's type, False otherwise\n\n    Raises:\n        ValueError: If the attribute's relation is not valid for the object's type and raise_error is True\n    \"\"\"\n    if attribute is None or obj is None:\n        return True\n\n    if (\n        hasattr(obj, \"name\")\n        and obj.name\n        and hasattr(attribute, \"relation\")\n        and attribute.relation\n        and hasattr(attribute, \"type\")\n        and attribute.type\n    ):\n        try:\n            object_type = ObjectType(obj.name)\n            relation = ObjectRelation(attribute.relation)\n            attribute_type = AttributeType(attribute.type)\n\n            return validate_relation_type_for_object(object_type, relation, attribute_type, raise_error)\n        except (ValueError, KeyError):\n            # If any of the conversions fail, skip validation\n            return True\n\n    return True\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_client_or_raise","title":"<code>validate_client_or_raise(client: Any) -&gt; None</code>","text":"<p>Legacy function for backward compatibility.</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_client_or_raise(client: Any) -&gt; None:\n    \"\"\"Legacy function for backward compatibility.\"\"\"\n    validate_client(client, raise_error=True)\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_entity_type_or_raise","title":"<code>validate_entity_type_or_raise(entity: Any, expected_types: Union[Type, List[Type]], param_name: str = 'entity') -&gt; None</code>","text":"<p>Legacy function for backward compatibility.</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_entity_type_or_raise(\n    entity: Any, expected_types: Union[Type, List[Type]], param_name: str = \"entity\"\n) -&gt; None:\n    \"\"\"Legacy function for backward compatibility.\"\"\"\n    validate_entity_type(entity, expected_types, param_name, raise_error=True)\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_model_or_raise","title":"<code>validate_model_or_raise(model: BaseModel) -&gt; None</code>","text":"<p>Legacy function for backward compatibility.</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_model_or_raise(model: BaseModel) -&gt; None:\n    \"\"\"Legacy function for backward compatibility.\"\"\"\n    validate_model(model, raise_error=True)\n</code></pre>"},{"location":"api-reference/validators/#openmisp.sdk.validators.validate_distribution_sharing_group_or_raise","title":"<code>validate_distribution_sharing_group_or_raise(distribution: Distribution, sharing_group: Optional[MISPSharingGroup] = None) -&gt; None</code>","text":"<p>Legacy function for backward compatibility.</p> Source code in <code>src/openmisp/sdk/validators.py</code> <pre><code>def validate_distribution_sharing_group_or_raise(\n    distribution: Distribution, sharing_group: Optional[MISPSharingGroup] = None\n) -&gt; None:\n    \"\"\"Legacy function for backward compatibility.\"\"\"\n    validate_distribution_sharing_group(distribution, sharing_group, raise_error=True)\n</code></pre>"},{"location":"examples/basic_usage/","title":"Basic Usage Examples","text":"<p>This guide provides practical examples of common operations using the OpenMISP.</p>"},{"location":"examples/basic_usage/#setup","title":"Setup","text":"<p>First, import and initialize the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import (\n    MISP,\n    Analysis,\n    AttributeType,\n    Distribution,\n    EventCriteria,\n    OrganizationCriteria,\n    SharingGroupCriteria,\n    TagCriteria,\n    ThreatLevel,\n)\n\n# Initialize client with environment variables\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n</code></pre>"},{"location":"examples/basic_usage/#server-information","title":"Server Information","text":"<p>Retrieve basic server information:</p> <pre><code># Check server health\nhealthcheck = misp.server.healthcheck()\nprint(f\"Healthcheck: {healthcheck}\")\n\n# Get server version\nversion = misp.server.version()\nprint(f\"Version: {version}\")\n\n# Get server settings (commented out as it may return a large amount of data)\n# settings = misp.server.settings()\n# print(f\"Settings: {settings}\")\n</code></pre>"},{"location":"examples/basic_usage/#working-with-organizations-and-sharing-groups","title":"Working with Organizations and Sharing Groups","text":"<p>Retrieve organizations and sharing groups:</p> <pre><code># Get a sharing group by name\nsharing_group = misp.get(SharingGroupCriteria(name=\"Test Sharing Group\"))\n\n# Get an organization by name\norganization = misp.get(OrganizationCriteria(name=\"ORGNAME\"))\n</code></pre>"},{"location":"examples/basic_usage/#creating-and-managing-events","title":"Creating and Managing Events","text":""},{"location":"examples/basic_usage/#listing-events","title":"Listing Events","text":"<pre><code># List published events\niterator = misp.list(EventCriteria(published=True))\nevent = next(iterator)\nprint(f\"Event: {event.info}\")\n</code></pre>"},{"location":"examples/basic_usage/#creating-events","title":"Creating Events","text":"<pre><code># Create a new event\nevent = misp.events.create(\n    published=False,\n    info=\"Suspicious Activity Report\",\n    organization=organization,  # Link to an organization\n    sharing_group=sharing_group,  # Link to a sharing group\n    distribution=Distribution.ORGANIZATION_ONLY,\n    threat_level=ThreatLevel.MEDIUM,\n    analysis=Analysis.ONGOING,\n)\n</code></pre>"},{"location":"examples/basic_usage/#updating-events","title":"Updating Events","text":"<pre><code># Update an existing event\nevent = misp.events.edit(\n    event=event,\n    analysis=Analysis.COMPLETED,\n)\n</code></pre>"},{"location":"examples/basic_usage/#publishing-events","title":"Publishing Events","text":"<pre><code># Publish an event\nmisp.events.edit(\n    event=event,\n    published=True,\n)\n</code></pre>"},{"location":"examples/basic_usage/#working-with-tags","title":"Working with Tags","text":""},{"location":"examples/basic_usage/#creating-tags","title":"Creating Tags","text":"<pre><code># Create a new tag\ntag = misp.tags.create(\n    name=\"team:source:feeds\",\n)\n</code></pre>"},{"location":"examples/basic_usage/#updating-tags","title":"Updating Tags","text":"<pre><code># Update an existing tag\ntag = misp.tags.edit(\n    tag=tag,\n    name=\"team:source:MYFEEDS\",\n)\n</code></pre>"},{"location":"examples/basic_usage/#linking-tags-to-events","title":"Linking Tags to Events","text":"<pre><code># Link a tag to an event\nmisp.events.link(event, tag)\n\n# Synchronize the event to apply changes\nmisp.sync(event)\n</code></pre>"},{"location":"examples/basic_usage/#listing-tags","title":"Listing Tags","text":"<pre><code># List tags matching a pattern\ntags = misp.tags.list(event, criteria=TagCriteria(pattern=\"team:\"))\nfor tag in tags:\n    print(f\"Tag: {tag.name}\")\n</code></pre>"},{"location":"examples/basic_usage/#batch-updating-tags","title":"Batch Updating Tags","text":"<pre><code># Update multiple tags in a batch\ntags = misp.tags.list(event, criteria=TagCriteria(pattern=\"team:\"))\nfor tag in tags:\n    misp.tags.edit(tag=tag, name=f\"{tag.name}-v2\")\n    misp.events.link(event, tag)\n</code></pre>"},{"location":"examples/basic_usage/#working-with-attributes","title":"Working with Attributes","text":""},{"location":"examples/basic_usage/#creating-attributes","title":"Creating Attributes","text":"<pre><code># Create an IP linkress attribute\nattribute = misp.attributes.create(\n    value=\"8.8.8.8\",\n    type=AttributeType.IP_DST,\n    detection=True,\n    correlation=True,\n)\n\n# Create a domain attribute\nattribute = misp.attributes.create(\n    value=\"example.com\",\n    type=AttributeType.DOMAIN,\n    detection=True,\n    correlation=False,\n)\n</code></pre>"},{"location":"examples/basic_usage/#updating-attributes","title":"Updating Attributes","text":"<pre><code># Update an existing attribute\nattribute = misp.attributes.edit(\n    attribute=attribute,\n    value=\"8.8.4.4\",\n)\n</code></pre>"},{"location":"examples/basic_usage/#linking-attributes-to-events","title":"Linking Attributes to Events","text":"<pre><code># Link an attribute to an event\nmisp.events.link(event, attribute)\n\n# Synchronize the event to apply changes\nmisp.sync(event)\n</code></pre>"},{"location":"examples/basic_usage/#tagging-attributes","title":"Tagging Attributes","text":"<pre><code># Create a tag for attributes\ntag = misp.tags.create(name=\"dangerous\")\n\n# Link the tag to specific attributes\nfor attribute in misp.attributes.list(event, criteria=AttributeCriteria(type=AttributeType.IP_DST)):\n    misp.attributes.link(attribute, tag)\n</code></pre>"},{"location":"examples/basic_usage/#synchronization","title":"Synchronization","text":"<p>After making changes to events, attributes, or tags, it's important to synchronize the event to ensure all changes are applied:</p> <pre><code># Synchronize an event after making changes\nmisp.sync(event)\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will help you install and set up the OpenMISP in your environment.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing OpenMISP, ensure you have:</p> <ul> <li>Python 3.8 or higher installed</li> <li>pip (Python package installer)</li> <li>Access to a MISP instance</li> <li>Your MISP API key</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<p>The recommended way to install OpenMISP is using pip:</p> <pre><code>pip install openmisp\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<p>To install from source:</p> <pre><code>git clone https://git.s.cec.eu.int/marti/openmisp\ncd openmisp\nuv sync\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>OpenMISP can be configured using environment variables:</p> <pre><code>export MISP_URL=\"https://your-misp-instance.com\"\nexport MISP_KEY=\"your-api-key\"\n</code></pre> <p>Alternatively, you can create a <code>.env</code> file:</p> <pre><code>MISP_URL=https://your-misp-instance.com\nMISP_KEY=your-api-key\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>You can verify your installation by running:</p> <pre><code>import os\nfrom openmisp.sdk import MISP\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n\n# This should print your MISP instance version\nversion = misp.server.version()\nprint(f\"MISP Version: {version}\")\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the Quick Start Guide to begin using OpenMISP</li> <li>Review the API Reference for detailed information about available features</li> <li>Try the Basic Usage Examples</li> </ul>"},{"location":"getting-started/methods-overview/","title":"Methods Overview","text":"<p>This page provides a comprehensive overview of all available methods in the OpenMISP SDK, organized by service.</p>"},{"location":"getting-started/methods-overview/#misp","title":"MISP","text":"<p>All these actions will be on the MISP server directly.</p> Method Description Example <code>misp.sync(entity)</code> Synchronize an entity with the MISP server <code>misp.sync(event)</code> <code>misp.get(criteria)</code> Get a single entity matching criteria <code>misp.get(EventCriteria(uuid=\"...\"))</code> <code>misp.exists(criteria)</code> Check if an entity exists <code>misp.exists(EventCriteria(uuid=\"...\"))</code> <code>misp.list(criteria)</code> List entities matching criteria <code>misp.list(EventCriteria(published=True))</code> <code>misp.delete(entity)</code> Delete an entity from the MISP server <code>misp.delete(event)</code>"},{"location":"getting-started/methods-overview/#server","title":"Server","text":"<p>All these actions will be on the MISP server directly.</p> Method Description Example <code>misp.server.healthcheck()</code> Check if the MISP server is running <code>health = misp.server.healthcheck()</code> <code>misp.server.settings()</code> Get server settings <code>settings = misp.server.settings()</code> <code>misp.server.version()</code> Get server version information <code>version = misp.server.version()</code>"},{"location":"getting-started/methods-overview/#events","title":"Events","text":"<p>All these actions will only be local until a <code>misp.sync(...)</code> is called.</p> Method Description Example <code>misp.events.create(...)</code> Create a new event <code>event = misp.events.create(info=\"...\", distribution=...)</code> <code>misp.events.edit(event, ...)</code> Edit an existing event <code>misp.events.edit(event, info=\"Updated info\")</code> <code>misp.events.link(event, target)</code> Link an entity to an event <code>misp.events.link(event, attribute)</code> <code>misp.events.unlink(event, target)</code> Unlink an entity from an event <code>misp.events.unlink(event, attribute)</code>"},{"location":"getting-started/methods-overview/#attributes","title":"Attributes","text":"<p>All these actions will only be local until a <code>misp.sync(...)</code> is called.</p> Method Description Example <code>misp.attributes.create(...)</code> Create a new attribute <code>attribute = misp.attributes.create(type=AttributeType.IP_DST, value=\"...\")</code> <code>misp.attributes.edit(attribute, ...)</code> Edit an existing attribute <code>misp.attributes.edit(attribute, value=\"...\")</code> <code>misp.attributes.get(from, ...)</code> Get an attribute by criteria <code>attribute = misp.attributes.get(from=event, type=AttributeType.IP_DST)</code> <code>misp.attributes.exists(from, ...)</code> Check if an attribute exists <code>exists = misp.attributes.exists(from=event, value=\"...\")</code> <code>misp.attributes.list(from, ...)</code> List attributes matching criteria <code>for attr in misp.attributes.list(from=event): ...</code> <code>misp.attributes.link(attribute, target)</code> Link an entity to an attribute <code>misp.attributes.link(attribute, tag)</code> <code>misp.attributes.unlink(attribute, target)</code> Unlink an entity from an attribute <code>misp.attributes.unlink(attribute, tag)</code>"},{"location":"getting-started/methods-overview/#objects","title":"Objects","text":"<p>All these actions will only be local until a <code>misp.sync(...)</code> is called.</p> Method Description Example <code>misp.objects.create(...)</code> Create a new object <code>obj = misp.objects.create(name=\"file\", description=\"...\")</code> <code>misp.objects.edit(object, ...)</code> Edit an existing object <code>misp.objects.edit(obj, description=\"...\")</code> <code>misp.objects.get(from, ...)</code> Get an object by criteria <code>obj = misp.objects.get(from=event, name=\"file\")</code> <code>misp.objects.exists(from, ...)</code> Check if an object exists <code>exists = misp.objects.exists(from=event, name=\"file\")</code> <code>misp.objects.list(from, ...)</code> List objects matching criteria <code>for obj in misp.objects.list(from=event): ...</code> <code>misp.objects.link(object, target)</code> Link an entity to an object <code>misp.objects.link(obj, tag)</code> <code>misp.objects.unlink(object, target)</code> Unlink an entity from an object <code>misp.objects.unlink(obj, tag)</code>"},{"location":"getting-started/methods-overview/#tags","title":"Tags","text":"<p>All these actions will only be local until a <code>misp.sync(...)</code> is called.</p> Method Description Example <code>misp.tags.create(...)</code> Create a new tag <code>tag = misp.tags.create(name=\"tlp:amber\")</code> <code>misp.tags.edit(tag, ...)</code> Edit an existing tag <code>misp.tags.edit(tag, colour=\"#FF0000\")</code> <code>misp.tags.get(...)</code> Get a tag by criteria <code>tag = misp.tags.get(name=\"tlp:amber\")</code> <code>misp.tags.exists(...)</code> Check if a tag exists <code>exists = misp.tags.exists(name=\"tlp:amber\")</code> <code>misp.tags.list(...)</code> List tags matching criteria <code>for tag in misp.tags.list(): ...</code>"},{"location":"getting-started/methods-overview/#galaxies","title":"Galaxies","text":"<p>All these actions will only be local until a <code>misp.sync(...)</code> is called.</p> Method Description Example <code>misp.galaxies.get(...)</code> Get a galaxy by criteria <code>galaxy = misp.galaxies.get(name=\"threat-actor\")</code> <code>misp.galaxies.exists(...)</code> Check if a galaxy exists <code>exists = misp.galaxies.exists(name=\"threat-actor\")</code> <code>misp.galaxies.list(...)</code> List galaxies matching criteria <code>for galaxy in misp.galaxies.list(): ...</code>"},{"location":"getting-started/methods-overview/#clusters","title":"Clusters","text":"<p>All these actions will only be local until a <code>misp.sync(...)</code> is called.</p> Method Description Example <code>misp.clusters.get(from, ...)</code> Get a cluster by criteria <code>cluster = misp.clusters.get(from=galaxy, name=\"APT28\")</code> <code>misp.clusters.exists(from, ...)</code> Check if a cluster exists <code>exists = misp.clusters.exists(from=galaxy, name=\"APT28\")</code> <code>misp.clusters.list(from, ...)</code> List clusters matching criteria <code>for cluster in misp.clusters.list(from=galaxy): ...</code>"},{"location":"getting-started/methods-overview/#criterias","title":"Criterias","text":"<p>These criterias are used to filter the entities returned by the methods <code>get</code>, <code>exists</code>, <code>list</code>.</p> Method Description Example <code>EventCriteria(...)</code> Event criteria <code>criteria = EventCriteria(published=True)</code> <code>ObjectCriteria(...)</code> Object criteria <code>criteria = ObjectCriteria(name=\"file\")</code> <code>AttributeCriteria(...)</code> Attribute criteria <code>criteria = AttributeCriteria(type=AttributeType.IP_DST)</code> <code>TagCriteria(...)</code> Tag criteria <code>criteria = TagCriteria(name=\"tlp:amber\")</code> <code>GalaxyCriteria(...)</code> Galaxy criteria <code>criteria = GalaxyCriteria(name=\"threat-actor\")</code> <code>ClusterCriteria(...)</code> Cluster criteria <code>criteria = ClusterCriteria(name=\"APT28\")</code> <code>OrganizationCriteria(...)</code> Organization criteria <code>criteria = OrganizationCriteria(name=\"ACME Inc.\")</code> <code>SharingGroupCriteria(...)</code> Sharing group criteria <code>criteria = SharingGroupCriteria(name=\"Financial Sector\")</code>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with OpenMISP by walking through some common use cases.</p>"},{"location":"getting-started/quickstart/#basic-setup","title":"Basic Setup","text":"<p>First, import and initialize the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import (\n    MISP,\n    Analysis,\n    AttributeType,\n    Distribution,\n    EventCriteria,\n    ThreatLevel,\n)\n\n# Initialize the client with environment variables\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n</code></pre>"},{"location":"getting-started/quickstart/#server-information","title":"Server Information","text":"<pre><code># Check server health\nhealthcheck = misp.server.healthcheck()\nprint(f\"Healthcheck: {healthcheck}\")\n\n# Get server version\nversion = misp.server.version()\nprint(f\"Version: {version}\")\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-events","title":"Working with Events","text":""},{"location":"getting-started/quickstart/#listing-events","title":"Listing Events","text":"<pre><code># List published events\niterator = misp.list(EventCriteria(published=True))\nevent = next(iterator)\nprint(f\"Event: {event.info}\")\n\n# Iterate through all published events\nfor event in misp.list(EventCriteria(published=True)):\n    print(f\"Event: {event.info}\")\n</code></pre>"},{"location":"getting-started/quickstart/#creating-events","title":"Creating Events","text":"<pre><code># Create a new event\nevent = misp.events.create(\n    published=False,\n    info=\"Suspicious Activity Report\",\n    distribution=Distribution.ORGANIZATION_ONLY,\n    threat_level=ThreatLevel.MEDIUM,\n    analysis=Analysis.ONGOING,\n)\n</code></pre>"},{"location":"getting-started/quickstart/#updating-events","title":"Updating Events","text":"<pre><code># Update an existing event\nevent = misp.events.edit(\n    event=event,\n    analysis=Analysis.COMPLETED,\n)\n\n# Publish an event\nmisp.events.edit(\n    event=event,\n    published=True,\n)\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-attributes","title":"Working with Attributes","text":""},{"location":"getting-started/quickstart/#creating-attributes","title":"Creating Attributes","text":"<pre><code># Create an IP linkress attribute\nattribute = misp.attributes.create(\n    value=\"8.8.8.8\",\n    type=AttributeType.IP_DST,\n    detection=True,\n    correlation=True,\n)\n\n# Create a domain attribute\nattribute = misp.attributes.create(\n    value=\"example.com\",\n    type=AttributeType.DOMAIN,\n    detection=True,\n    correlation=False,\n)\n</code></pre>"},{"location":"getting-started/quickstart/#updating-attributes","title":"Updating Attributes","text":"<pre><code># Update an existing attribute\nattribute = misp.attributes.edit(\n    attribute=attribute,\n    value=\"8.8.4.4\",\n)\n</code></pre>"},{"location":"getting-started/quickstart/#linking-attributes-to-events","title":"Linking Attributes to Events","text":"<pre><code># Link an attribute to an event\nmisp.events.link(event, attribute)\n\n# Synchronize the event to apply changes\nmisp.sync(event)\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-tags","title":"Working with Tags","text":""},{"location":"getting-started/quickstart/#creating-and-updating-tags","title":"Creating and Updating Tags","text":"<pre><code># Create a new tag\ntag = misp.tags.create(\n    name=\"team:source:feeds\",\n)\n\n# Update an existing tag\ntag = misp.tags.edit(\n    tag=tag,\n    name=\"team:source:MYFEEDS\",\n)\n</code></pre>"},{"location":"getting-started/quickstart/#linking-tags","title":"Linking Tags","text":"<pre><code># Link a tag to an event\nmisp.events.link(event, tag)\n\n# Link a tag to an attribute\nmisp.attributes.link(attribute, tag)\n\n# Synchronize the event to apply changes\nmisp.sync(event)\n</code></pre>"},{"location":"getting-started/quickstart/#searching-tags","title":"Searching Tags","text":"<pre><code># List tags matching a pattern\ntags = misp.tags.list(event, criteria=TagCriteria(pattern=\"team:\"))\nfor tag in tags:\n    print(f\"Tag: {tag.name}\")\n</code></pre>"},{"location":"getting-started/quickstart/#synchronization","title":"Synchronization","text":"<p>After making changes to events, attributes, or tags, it's important to synchronize the event to ensure all changes are applied:</p> <pre><code># Synchronize an event after making changes\nmisp.sync(event)\n</code></pre>"},{"location":"getting-started/quickstart/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    # Attempt to perform an operation\n    event = misp.get(EventCriteria(uuid=\"non-existent-uuid\"))\n    if event is None:\n        print(\"Event not found\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Reference for detailed information about all available features</li> <li>Look at more complex Examples</li> <li>Learn about Advanced Features like working with galaxies and sharing groups</li> </ul>"},{"location":"reference/attributes/","title":"Attributes Reference","text":"<p>The Attributes API provides methods for creating, retrieving, updating, and managing MISP attributes, which are the basic building blocks of MISP events, representing individual pieces of information such as IP linkresses, domain names, file hashes, etc.</p>"},{"location":"reference/attributes/#initialization","title":"Initialization","text":"<p>The <code>AttributeService</code> class is accessed through the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import MISP, AttributeType, AttributeCriteria\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n\n# Access the attributes service\nattribute_service = misp.attributes\n</code></pre>"},{"location":"reference/attributes/#methods","title":"Methods","text":""},{"location":"reference/attributes/#create","title":"create","text":"<p>Create a new attribute.</p> <pre><code># Create a new attribute\nattribute = misp.attributes.create(\n    type=AttributeType.IP_DST,\n    value=\"192.168.1.1\",\n    detection=True,\n    correlation=True,\n    comment=\"Suspicious IP\"\n)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>type</code> AttributeType Yes Attribute type enum <code>value</code> str Yes Attribute value <code>detection</code> bool Yes Enable detection (IDS flag) <code>correlation</code> bool Yes Enable correlation <code>comment</code> str No Additional comments"},{"location":"reference/attributes/#edit","title":"edit","text":"<p>Update an existing attribute.</p> <pre><code># Update an attribute\nattribute = misp.attributes.edit(\n    attribute=attribute,\n    type=AttributeType.DOMAIN,\n    value=\"suspicious.com\",\n    detection=True,\n    correlation=False,\n    comment=\"Updated comment\"\n)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>attribute</code> MISPAttribute Yes Attribute to update <code>type</code> AttributeType No New attribute type <code>value</code> str No New value <code>detection</code> bool No New detection setting <code>correlation</code> bool No New correlation setting <code>comment</code> str No New comment"},{"location":"reference/attributes/#get","title":"get","text":"<p>Retrieve an attribute by criteria.</p> <pre><code># Get attribute from an event\nattribute = misp.attributes.get(event, type=AttributeType.IP_DST, value=\"192.168.1.1\")\n\n# Get attribute from an object\nattribute = misp.attributes.get(misp_object, type=AttributeType.DOMAIN)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent or MISPObject Yes Parent event or object <code>**fields</code> Various No Attribute fields to match"},{"location":"reference/attributes/#exists","title":"exists","text":"<p>Check if an attribute exists.</p> <pre><code># Check if attribute exists in an event\nexists = misp.attributes.exists(event, type=AttributeType.IP_DST, value=\"192.168.1.1\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent or MISPObject Yes Parent event or object <code>**fields</code> Various No Attribute fields to match"},{"location":"reference/attributes/#list","title":"list","text":"<p>List attributes based on criteria.</p> <pre><code># List attributes in an event\nfor attribute in misp.attributes.list(event, type=AttributeType.IP_DST):\n    print(f\"IP: {attribute.value}\")\n\n# List attributes in an object\nfor attribute in misp.attributes.list(misp_object, filter=AttributeCriteria(detection=True)):\n    print(f\"{attribute.type}: {attribute.value}\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent or MISPObject Yes Parent event or object <code>filter</code> AttributeCriteria No Filter criteria"},{"location":"reference/attributes/#link","title":"link","text":"<p>Link a tag or cluster to an attribute.</p> <pre><code># Link a tag\ntag = misp.tags.create(name=\"tlp:amber\")\nmisp.attributes.link(attribute, tag)\n\n# Link a galaxy cluster\ncluster = misp.clusters.get(misp.galaxies.get(name=\"threat-actor\"), name=\"APT28\")\nmisp.attributes.link(attribute, cluster)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>source</code> MISPAttribute Yes Source attribute <code>target</code> MISPTag or MISPGalaxyCluster Yes Target to link"},{"location":"reference/attributes/#unlink","title":"unlink","text":"<p>Unlink a tag or cluster from an attribute.</p> <pre><code># Unlink a tag\nmisp.attributes.unlink(attribute, tag)\n\n# Unlink a galaxy cluster\nmisp.attributes.unlink(attribute, cluster)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>source</code> MISPAttribute Yes Source attribute <code>target</code> MISPTag or MISPGalaxyCluster Yes Target to unlink"},{"location":"reference/attributes/#attribute-types","title":"Attribute Types","text":"<p>The SDK provides an <code>AttributeType</code> enum for all supported attribute types:</p>"},{"location":"reference/attributes/#network-indicators","title":"Network Indicators","text":"<pre><code>AttributeType.IP_DST          # \"ip-dst\"\nAttributeType.IP_SRC          # \"ip-src\"\nAttributeType.DOMAIN          # \"domain\"\nAttributeType.HOSTNAME        # \"hostname\"\nAttributeType.URL            # \"url\"\nAttributeType.EMAIL_SRC      # \"email-src\"\nAttributeType.EMAIL_DST      # \"email-dst\"\nAttributeType.AS             # \"AS\"\n</code></pre>"},{"location":"reference/attributes/#file-indicators","title":"File Indicators","text":"<pre><code>AttributeType.FILENAME       # \"filename\"\nAttributeType.MD5           # \"md5\"\nAttributeType.SHA1          # \"sha1\"\nAttributeType.SHA256        # \"sha256\"\nAttributeType.SIZE_IN_BYTES # \"size-in-bytes\"\nAttributeType.FILE_TYPE     # \"file-type\"\nAttributeType.MIME_TYPE     # \"mime-type\"\n</code></pre>"},{"location":"reference/attributes/#system-indicators","title":"System Indicators","text":"<pre><code>AttributeType.MUTEX         # \"mutex\"\nAttributeType.PROCESS_NAME  # \"process-name\"\nAttributeType.PID           # \"pid\"\nAttributeType.PORT          # \"port\"\nAttributeType.USER_AGENT    # \"user-agent\"\n</code></pre>"},{"location":"reference/attributes/#other-types","title":"Other Types","text":"<pre><code>AttributeType.COMMENT       # \"comment\"\nAttributeType.TEXT         # \"text\"\nAttributeType.VULNERABILITY # \"vulnerability\"\nAttributeType.LINK         # \"link\"\n</code></pre>"},{"location":"reference/clusters/","title":"Clusters Reference","text":"<p>The Clusters API provides methods for retrieving and managing MISP galaxy clusters, which are specific instances within a galaxy, such as particular threat actors, malware families, or attack techniques.</p>"},{"location":"reference/clusters/#initialization","title":"Initialization","text":"<p>The <code>ClusterService</code> class is accessed through the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import MISP, ClusterCriteria\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n\n# Access the clusters service\ncluster_service = misp.clusters\n</code></pre>"},{"location":"reference/clusters/#methods","title":"Methods","text":""},{"location":"reference/clusters/#get","title":"get","text":"<p>Retrieve a cluster by criteria.</p> <pre><code># Get cluster from a galaxy\ngalaxy = misp.galaxies.get(name=\"threat-actor\")\ncluster = misp.clusters.get(from=galaxy, name=\"APT28\")\n\n# Get cluster from an event\ncluster = misp.clusters.get(from=event, name=\"APT28\")\n\n# Get cluster from an attribute\ncluster = misp.clusters.get(from=attribute, name=\"Emotet\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPGalaxy, MISPEvent, MISPObject, or MISPAttribute Yes Parent entity <code>name</code> str No Cluster name <code>**fields</code> Various No Other cluster fields to match"},{"location":"reference/clusters/#exists","title":"exists","text":"<p>Check if a cluster exists.</p> <pre><code># Check if cluster exists in a galaxy\ngalaxy = misp.galaxies.get(name=\"threat-actor\")\nexists = misp.clusters.exists(from=galaxy, name=\"APT28\")\n\n# Check if cluster exists in an event\nexists = misp.clusters.exists(from=event, name=\"APT28\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPGalaxy, MISPEvent, MISPObject, or MISPAttribute Yes Parent entity <code>name</code> str No Cluster name <code>**fields</code> Various No Other cluster fields to match"},{"location":"reference/clusters/#list","title":"list","text":"<p>List clusters based on criteria.</p> <pre><code># List all clusters in a galaxy\ngalaxy = misp.galaxies.get(name=\"threat-actor\")\nfor cluster in misp.clusters.list(from=galaxy):\n    print(f\"Threat Actor: {cluster.name}\")\n\n# List clusters with a specific pattern\nfor cluster in misp.clusters.list(from=galaxy, filter=ClusterCriteria(pattern=\"APT\")):\n    print(f\"APT Group: {cluster.name}\")\n\n# List clusters in an event\nfor cluster in misp.clusters.list(from=event):\n    print(f\"Event Cluster: {cluster.name}\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPGalaxy, MISPEvent, MISPObject, or MISPAttribute Yes Parent entity <code>filter</code> ClusterCriteria No Filter criteria"},{"location":"reference/clusters/#common-cluster-types","title":"Common Cluster Types","text":"<p>MISP provides several common cluster types within different galaxies:</p>"},{"location":"reference/clusters/#threat-actor-clusters","title":"Threat Actor Clusters","text":"<pre><code># Get threat actor galaxy\nthreat_actor_galaxy = misp.galaxies.get(name=\"threat-actor\")\n\n# List common threat actor clusters\ncommon_threat_actors = [\n    \"APT28\",           # Fancy Bear, Russian military intelligence\n    \"APT29\",           # Cozy Bear, Russian foreign intelligence\n    \"Lazarus Group\",   # North Korean state-sponsored group\n    \"APT1\",            # Chinese PLA Unit 61398\n    \"FIN7\"             # Financial cybercrime group\n]\n\n# Link a threat actor to an event\napt28 = misp.clusters.get(from=threat_actor_galaxy, name=\"APT28\")\nmisp.events.link(event, apt28)\n</code></pre>"},{"location":"reference/clusters/#mitre-attck-technique-clusters","title":"MITRE ATT&amp;CK Technique Clusters","text":"<pre><code># Get MITRE ATT&amp;CK galaxy\nattack_galaxy = misp.galaxies.get(name=\"mitre-attack-pattern\")\n\n# List common ATT&amp;CK techniques\ncommon_techniques = [\n    \"T1059 - Command and Scripting Interpreter\",\n    \"T1566 - Phishing\",\n    \"T1486 - Data Encrypted for Impact\",\n    \"T1078 - Valid Accounts\",\n    \"T1027 - Obfuscated Files or Information\"\n]\n\n# Link an attack technique to an attribute\nt1059 = misp.clusters.get(from=attack_galaxy, name=\"T1059 - Command and Scripting Interpreter\")\nmisp.attributes.link(attribute, t1059)\n</code></pre>"},{"location":"reference/clusters/#malware-clusters","title":"Malware Clusters","text":"<pre><code># Get malware galaxy\nmalware_galaxy = misp.galaxies.get(name=\"malware\")\n\n# List common malware families\ncommon_malware = [\n    \"Emotet\",\n    \"TrickBot\",\n    \"Ryuk\",\n    \"Cobalt Strike\",\n    \"Mimikatz\"\n]\n\n# Link a malware family to an object\nemotet = misp.clusters.get(from=malware_galaxy, name=\"Emotet\")\nmisp.objects.link(misp_object, emotet)\n</code></pre>"},{"location":"reference/events/","title":"Events Reference","text":"<p>The Events API provides methods for creating, retrieving, updating, and deleting MISP events.</p>"},{"location":"reference/events/#initialization","title":"Initialization","text":"<p>The <code>EventService</code> class is accessed through the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import (\n    MISP,\n    Analysis,\n    Distribution,\n    EventCriteria,\n    OrganizationCriteria,\n    SharingGroupCriteria,\n    ThreatLevel,\n)\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n\n# Access the events service\nevent_service = misp.events\n</code></pre>"},{"location":"reference/events/#methods","title":"Methods","text":""},{"location":"reference/events/#create","title":"create","text":"<p>Create a new MISP event.</p> <pre><code># Get required objects\norganization = misp.get(OrganizationCriteria(name=\"Your Org\"))\nsharing_group = misp.get(SharingGroupCriteria(name=\"Your Group\"))\n\n# Create event\nevent = misp.events.create(\n    info=\"Suspicious Activity Report\",\n    published=False,\n    sharing_group=sharing_group,\n    distribution=Distribution.ORGANIZATION_ONLY,\n    threat_level=ThreatLevel.MEDIUM,\n    analysis=Analysis.INITIAL,\n    organization=organization\n)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>info</code> str Yes Event description <code>published</code> bool Yes Whether the event is published <code>sharing_group</code> MISPSharingGroup No Sharing group for the event (required if distribution is SHARING_GROUP) <code>distribution</code> Distribution Yes Distribution level enum <code>threat_level</code> ThreatLevel Yes Threat level enum <code>analysis</code> Analysis Yes Analysis state enum <code>organization</code> MISPOrganisation No Organization creating the event"},{"location":"reference/events/#edit","title":"edit","text":"<p>Update an existing event.</p> <pre><code>event = misp.events.edit(\n    event=event,\n    info=\"Updated Information\",\n    threat_level=ThreatLevel.HIGH,\n    analysis=Analysis.ONGOING\n)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>event</code> MISPEvent Yes Event to update <code>info</code> str No New event description <code>published</code> bool No New published state <code>sharing_group</code> MISPSharingGroup No New sharing group <code>distribution</code> Distribution No New distribution level <code>threat_level</code> ThreatLevel No New threat level <code>analysis</code> Analysis No New analysis state <code>organization</code> MISPOrganisation No New organization"},{"location":"reference/events/#link","title":"link","text":"<p>Link an entity (attribute, object, tag, or cluster) to an event.</p> <pre><code># Create and link an attribute\nattribute = misp.attributes.create(\n    type=AttributeType.IP_DST,\n    value=\"192.168.1.1\",\n    detection=True,\n    correlation=True,\n    comment=\"Suspicious IP\"\n)\nmisp.events.link(event, attribute)\n\n# Create and link a tag\ntag = misp.tags.create(name=\"tlp:amber\")\nmisp.events.link(event, tag)\n</code></pre>"},{"location":"reference/events/#unlink","title":"unlink","text":"<p>Unlink an entity from an event.</p> <pre><code>misp.events.unlink(event, attribute)\nmisp.events.unlink(event, tag)\n</code></pre>"},{"location":"reference/events/#sync","title":"sync","text":"<p>Synchronize an event with the MISP server.</p> <pre><code># Make changes to event\nattribute = misp.attributes.create(\n    type=AttributeType.DOMAIN,\n    value=\"suspicious.com\",\n    detection=True,\n    correlation=True\n)\nmisp.events.link(event, attribute)\n\n# Sync changes\nmisp.sync(event)\n</code></pre> <pre><code>try:\n    # Attempt to get an event\n    event = misp.get(EventCriteria(uuid=\"non-existent-uuid\"))\n    if event is None:\n        print(\"Event not found\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"reference/galaxies/","title":"Galaxies Reference","text":"<p>The Galaxies API provides methods for retrieving and managing MISP galaxies, which are knowledge bases of threat actors, tools, malware, and other intelligence items.</p>"},{"location":"reference/galaxies/#initialization","title":"Initialization","text":"<p>The <code>GalaxyService</code> class is accessed through the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import MISP, GalaxyCriteria\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n\n# Access the galaxies service\ngalaxy_service = misp.galaxies\n</code></pre>"},{"location":"reference/galaxies/#methods","title":"Methods","text":""},{"location":"reference/galaxies/#get","title":"get","text":"<p>Retrieve a galaxy by criteria.</p> <pre><code># Get galaxy by name\ngalaxy = misp.galaxies.get(name=\"threat-actor\")\n\n# Get galaxy from an event\ngalaxy = misp.galaxies.get(from=event, name=\"threat-actor\")\n\n# Get galaxy from an attribute\ngalaxy = misp.galaxies.get(from=attribute, name=\"tool\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent, MISPObject, or MISPAttribute No Parent entity <code>name</code> str No Galaxy name <code>**fields</code> Various No Other galaxy fields to match"},{"location":"reference/galaxies/#exists","title":"exists","text":"<p>Check if a galaxy exists.</p> <pre><code># Check if galaxy exists\nexists = misp.galaxies.exists(name=\"threat-actor\")\n\n# Check if galaxy exists in an event\nexists = misp.galaxies.exists(from=event, name=\"threat-actor\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent, MISPObject, or MISPAttribute No Parent entity <code>name</code> str No Galaxy name <code>**fields</code> Various No Other galaxy fields to match"},{"location":"reference/galaxies/#list","title":"list","text":"<p>List galaxies based on criteria.</p> <pre><code># List all galaxies\nfor galaxy in misp.galaxies.list():\n    print(f\"Galaxy: {galaxy.name}\")\n\n# List galaxies with a specific pattern\nfor galaxy in misp.galaxies.list(filter=GalaxyCriteria(pattern=\"mitre-\")):\n    print(f\"MITRE Galaxy: {galaxy.name}\")\n\n# List galaxies in an event\nfor galaxy in misp.galaxies.list(from=event):\n    print(f\"Event Galaxy: {galaxy.name}\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent, MISPObject, or MISPAttribute No Parent entity <code>filter</code> GalaxyCriteria No Filter criteria"},{"location":"reference/galaxies/#common-galaxy-types","title":"Common Galaxy Types","text":"<p>MISP provides several common galaxy types:</p>"},{"location":"reference/galaxies/#threat-actors","title":"Threat Actors","text":"<pre><code># Get threat actor galaxy\nthreat_actor_galaxy = misp.galaxies.get(name=\"threat-actor\")\n\n# Get specific threat actor cluster\napt28_cluster = misp.clusters.get(from=threat_actor_galaxy, name=\"APT28\")\n\n# Link threat actor to an event\nmisp.events.link(event, apt28_cluster)\n</code></pre>"},{"location":"reference/galaxies/#attack-patterns-mitre-attck","title":"Attack Patterns (MITRE ATT&amp;CK)","text":"<pre><code># Get MITRE ATT&amp;CK galaxy\nattack_galaxy = misp.galaxies.get(name=\"mitre-attack-pattern\")\n\n# Get specific attack pattern cluster\nt1059_cluster = misp.clusters.get(from=attack_galaxy, name=\"T1059 - Command and Scripting Interpreter\")\n\n# Link attack pattern to an attribute\nmisp.attributes.link(attribute, t1059_cluster)\n</code></pre>"},{"location":"reference/galaxies/#malware","title":"Malware","text":"<pre><code># Get malware galaxy\nmalware_galaxy = misp.galaxies.get(name=\"malware\")\n\n# Get specific malware cluster\nemotet_cluster = misp.clusters.get(from=malware_galaxy, name=\"Emotet\")\n\n# Link malware to an object\nmisp.objects.link(misp_object, emotet_cluster)\n</code></pre>"},{"location":"reference/misp/","title":"MISP Reference","text":"<p>The <code>MISP</code> class is the main entry point for interacting with a MISP instance through the OpenMISP.</p>"},{"location":"reference/misp/#initialization","title":"Initialization","text":"<pre><code>import os\nfrom openmisp.sdk import MISP\n\n# Initialize with direct parameters\nmisp = MISP(\n    url=\"https://your-misp-instance.com\",\n    key=\"your-api-key\",\n    ssl=True  # Enable/disable SSL verification\n)\n\n# Or initialize with environment variables\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False  # Set to True in production environments\n)\n</code></pre>"},{"location":"reference/misp/#properties","title":"Properties","text":"Property Type Description <code>client</code> PyMISP The underlying PyMISP client <code>events</code> EventService Service for managing MISP events <code>objects</code> ObjectService Service for managing MISP objects <code>attributes</code> AttributeService Service for managing MISP attributes <code>tags</code> TagService Service for managing MISP tags <code>galaxies</code> GalaxyService Service for managing MISP galaxies <code>clusters</code> ClusterService Service for managing galaxy clusters <code>organizations</code> OrganizationService Service for managing organizations <code>sharing_groups</code> SharingGroupService Service for managing sharing groups <code>server</code> ServerService Service for server-related operations"},{"location":"reference/misp/#methods","title":"Methods","text":""},{"location":"reference/misp/#list","title":"list","text":"<pre><code>from openmisp.sdk import EventCriteria, AttributeCriteria, TagCriteria\n\n# List published events\ncriteria = EventCriteria(published=True)\n\nfor event in misp.list(criteria):\n    print(f\"Event: {event.info}\")\n\n\n# List attributes of a specific type\ncriteria = AttributeCriteria(type=AttributeType.IP_DST)\n\nfor attribute in misp.list(criteria):\n    print(f\"Attribute: {attribute.value}\")\n\n\n# List tags matching a pattern\ncriteria = TagCriteria(pattern=\"tlp:\")\n\nfor tag in misp.list(criteria):\n    print(f\"Tag: {tag.name}\")\n</code></pre>"},{"location":"reference/misp/#get","title":"get","text":"<pre><code>from openmisp.sdk import EventCriteria, OrganizationCriteria, SharingGroupCriteria\n\n# Get an event by UUID\ncriteria = EventCriteria(uuid=\"event-uuid\")\nevent = misp.get(criteria)\n\n\n# Get an organization by name\ncriteria = OrganizationCriteria(name=\"ORGNAME\")\norganization = misp.get(criteria)\n\n\n# Get a sharing group by name\ncriteria = SharingGroupCriteria(name=\"Test Sharing Group\")\nsharing_group = misp.get(criteria)\n</code></pre>"},{"location":"reference/misp/#sync","title":"sync","text":"<pre><code># After making changes to an event\nmisp.sync(event)\n</code></pre>"},{"location":"reference/misp/#enums","title":"Enums","text":"<p>The SDK provides several enums for standardized values:</p>"},{"location":"reference/misp/#distribution","title":"Distribution","text":"<pre><code>from openmisp.sdk import Distribution\n\nDistribution.ORGANIZATION_ONLY      # 0\nDistribution.COMMUNITY_ONLY        # 1\nDistribution.CONNECTED_COMMUNITIES # 2\nDistribution.ALL_COMMUNITIES      # 3\nDistribution.SHARING_GROUP        # 4\n</code></pre>"},{"location":"reference/misp/#threatlevel","title":"ThreatLevel","text":"<pre><code>from openmisp.sdk import ThreatLevel\n\nThreatLevel.HIGH      # 1\nThreatLevel.MEDIUM    # 2\nThreatLevel.LOW       # 3\nThreatLevel.UNDEFINED # 4\n</code></pre>"},{"location":"reference/misp/#analysis","title":"Analysis","text":"<pre><code>from openmisp.sdk import Analysis\n\nAnalysis.INITIAL    # 0\nAnalysis.ONGOING    # 1\nAnalysis.COMPLETED  # 2\n</code></pre>"},{"location":"reference/misp/#attributetype","title":"AttributeType","text":"<pre><code>from openmisp.sdk import AttributeType\n\nAttributeType.IP_DST          # \"ip-dst\"\nAttributeType.DOMAIN          # \"domain\"\nAttributeType.HOSTNAME        # \"hostname\"\nAttributeType.URL            # \"url\"\nAttributeType.MD5            # \"md5\"\nAttributeType.SHA1           # \"sha1\"\nAttributeType.SHA256         # \"sha256\"\nAttributeType.FILENAME       # \"filename\"\nAttributeType.EMAIL          # \"email\"\nAttributeType.TEXT           # \"text\"\nAttributeType.DATETIME       # \"datetime\"\nAttributeType.REGKEY         # \"regkey\"\nAttributeType.SIZE_IN_BYTES  # \"size-in-bytes\"\n# ... and many more\n</code></pre>"},{"location":"reference/misp/#error-handling","title":"Error Handling","text":"<p>The client may raise various exceptions:</p> <pre><code>try:\n    # Attempt operations\n    event = misp.get(EventCriteria(uuid=\"non-existent-uuid\"))\n    if event is None:\n        print(\"Event not found\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"reference/objects/","title":"Objects Reference","text":"<p>The Objects API provides methods for creating, retrieving, updating, and managing MISP objects, which are structured collections of attributes that represent more complex data structures.</p>"},{"location":"reference/objects/#initialization","title":"Initialization","text":"<p>The <code>ObjectService</code> class is accessed through the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import MISP, ObjectCriteria\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n\n# Access the objects service\nobject_service = misp.objects\n</code></pre>"},{"location":"reference/objects/#methods","title":"Methods","text":""},{"location":"reference/objects/#create","title":"create","text":"<p>Create a new MISP object.</p> <pre><code># Create a new object\nmisp_object = misp.objects.create(\n    name=\"file\",\n    description=\"Suspicious executable file\",\n    template_uuid=\"688c46fb-5edb-40a3-8273-1af7923e2215\"\n)\n\n# Link attributes to the object\nmisp.attributes.create(\n    type=AttributeType.FILENAME,\n    value=\"malware.exe\",\n    detection=True,\n    correlation=True,\n    parent=misp_object\n)\n\nmisp.attributes.create(\n    type=AttributeType.MD5,\n    value=\"d41d8cd98f00b204e9800998ecf8427e\",\n    detection=True,\n    correlation=True,\n    parent=misp_object\n)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>name</code> str Yes Object name/type <code>description</code> str Yes Object description <code>template_uuid</code> str No UUID of the object template"},{"location":"reference/objects/#edit","title":"edit","text":"<p>Update an existing object.</p> <pre><code># Update an object\nmisp_object = misp.objects.edit(\n    object=misp_object,\n    name=\"file\",\n    description=\"Updated description for suspicious file\"\n)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>object</code> MISPObject Yes Object to update <code>name</code> str No New object name/type <code>description</code> str No New object description <code>template_uuid</code> str No New template UUID"},{"location":"reference/objects/#get","title":"get","text":"<p>Retrieve an object by criteria.</p> <pre><code># Get object from an event\nmisp_object = misp.objects.get(from=event, name=\"file\")\n\n# Get object by UUID\nmisp_object = misp.objects.get(from=event, uuid=\"a1b2c3d4-e5f6-7890-abcd-ef1234567890\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent Yes Parent event <code>**fields</code> Various No Object fields to match"},{"location":"reference/objects/#exists","title":"exists","text":"<p>Check if an object exists.</p> <pre><code># Check if object exists in an event\nexists = misp.objects.exists(from=event, name=\"file\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent Yes Parent event <code>**fields</code> Various No Object fields to match"},{"location":"reference/objects/#list","title":"list","text":"<p>List objects based on criteria.</p> <pre><code># List all objects in an event\nfor misp_object in misp.objects.list(from=event):\n    print(f\"Object: {misp_object.name} - {misp_object.description}\")\n\n# List objects with specific criteria\nfor misp_object in misp.objects.list(from=event, filter=ObjectCriteria(name=\"file\")):\n    print(f\"File object: {misp_object.description}\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent Yes Parent event <code>filter</code> ObjectCriteria No Filter criteria"},{"location":"reference/objects/#link","title":"link","text":"<p>Link a tag, galaxy, or cluster to an object.</p> <pre><code># Link a tag\ntag = misp.tags.create(name=\"tlp:amber\")\nmisp.objects.link(misp_object, tag)\n\n# Link a galaxy cluster\ncluster = misp.clusters.get(from=misp.galaxies.get(name=\"threat-actor\"), name=\"APT28\")\nmisp.objects.link(misp_object, cluster)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>source</code> MISPObject Yes Source object <code>target</code> MISPTag, MISPGalaxy, or MISPGalaxyCluster Yes Target to link"},{"location":"reference/objects/#unlink","title":"unlink","text":"<p>Unlink a tag, galaxy, or cluster from an object.</p> <pre><code># Unlink a tag\nmisp.objects.unlink(misp_object, tag)\n\n# Unlink a galaxy cluster\nmisp.objects.unlink(misp_object, cluster)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>source</code> MISPObject Yes Source object <code>target</code> MISPTag, MISPGalaxy, or MISPGalaxyCluster Yes Target to unlink"},{"location":"reference/objects/#common-object-types","title":"Common Object Types","text":"<p>MISP provides templates for many common object types:</p>"},{"location":"reference/objects/#file-objects","title":"File Objects","text":"<pre><code># Create a file object\nfile_object = misp.objects.create(name=\"file\", description=\"Malicious file\")\n\n# Link file attributes\nmisp.attributes.create(type=AttributeType.FILENAME, value=\"malware.exe\", parent=file_object)\nmisp.attributes.create(type=AttributeType.MD5, value=\"d41d8cd98f00b204e9800998ecf8427e\", parent=file_object)\nmisp.attributes.create(type=AttributeType.SHA1, value=\"da39a3ee5e6b4b0d3255bfef95601890afd80709\", parent=file_object)\nmisp.attributes.create(type=AttributeType.SIZE_IN_BYTES, value=\"1024\", parent=file_object)\n</code></pre>"},{"location":"reference/objects/#network-objects","title":"Network Objects","text":"<pre><code># Create a network connection object\nnetwork_object = misp.objects.create(name=\"network-connection\", description=\"Suspicious connection\")\n\n# Link network attributes\nmisp.attributes.create(type=AttributeType.IP_DST, value=\"192.168.1.1\", parent=network_object)\nmisp.attributes.create(type=AttributeType.PORT_DST, value=\"443\", parent=network_object)\nmisp.attributes.create(type=AttributeType.HOSTNAME_DST, value=\"evil.com\", parent=network_object)\n</code></pre>"},{"location":"reference/organizations/","title":"Organizations Reference","text":"<p>The Organizations API provides methods for retrieving and managing MISP organizations, which represent the entities that create and share intelligence within the MISP ecosystem.</p>"},{"location":"reference/organizations/#initialization","title":"Initialization","text":"<p>The <code>OrganizationService</code> class is accessed through the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import MISP, OrganizationCriteria\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n\n# Access the organizations service\norganization_service = misp.organizations\n</code></pre>"},{"location":"reference/organizations/#methods","title":"Methods","text":""},{"location":"reference/organizations/#get","title":"get","text":"<p>Retrieve an organization by criteria.</p> <pre><code># Get organization by name\norganization = misp.organizations.get(name=\"ACME Inc.\")\n\n# Get organization by UUID\norganization = misp.organizations.get(uuid=\"a1b2c3d4-e5f6-7890-abcd-ef1234567890\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>name</code> str No Organization name <code>uuid</code> str No Organization UUID <code>**fields</code> Various No Other organization fields to match"},{"location":"reference/organizations/#exists","title":"exists","text":"<p>Check if an organization exists.</p> <pre><code># Check if organization exists\nexists = misp.organizations.exists(name=\"ACME Inc.\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>name</code> str No Organization name <code>uuid</code> str No Organization UUID <code>**fields</code> Various No Other organization fields to match"},{"location":"reference/organizations/#list","title":"list","text":"<p>List organizations based on criteria.</p> <pre><code># List all organizations\nfor organization in misp.organizations.list():\n    print(f\"Organization: {organization.name}\")\n\n# List organizations with a specific pattern\nfor organization in misp.organizations.list(filter=OrganizationCriteria(pattern=\"CERT\")):\n    print(f\"CERT Organization: {organization.name}\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>filter</code> OrganizationCriteria No Filter criteria"},{"location":"reference/organizations/#working-with-organizations","title":"Working with Organizations","text":"<p>Organizations are used in various contexts within MISP:</p>"},{"location":"reference/organizations/#creating-events-with-organizations","title":"Creating Events with Organizations","text":"<pre><code># Get an organization\norganization = misp.organizations.get(name=\"ACME Inc.\")\n\n# Create an event with the organization\nevent = misp.events.create(\n    info=\"Suspicious Activity Report\",\n    published=False,\n    distribution=Distribution.ORGANIZATION_ONLY,\n    threat_level=ThreatLevel.MEDIUM,\n    analysis=Analysis.INITIAL,\n    organization=organization\n)\n</code></pre>"},{"location":"reference/organizations/#filtering-events-by-organization","title":"Filtering Events by Organization","text":"<pre><code># List events from a specific organization\norganization = misp.organizations.get(name=\"ACME Inc.\")\nfor event in misp.list(EventCriteria(org_id=organization.id)):\n    print(f\"Event: {event.info}\")\n</code></pre>"},{"location":"reference/organizations/#organization-sectors","title":"Organization Sectors","text":"<pre><code># Get organization with sector information\norganization = misp.organizations.get(name=\"ACME Inc.\")\nprint(f\"Organization: {organization.name}\")\nprint(f\"Sector: {organization.sector}\")\nprint(f\"Type: {organization.type}\")\n</code></pre>"},{"location":"reference/server/","title":"Server Reference","text":"<p>The Server API provides methods for interacting with the MISP server itself, allowing you to check server status, retrieve settings, and get version information.</p>"},{"location":"reference/server/#initialization","title":"Initialization","text":"<p>The <code>ServerService</code> class is accessed through the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import MISP\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n\n# Access the server service\nserver_service = misp.server\n</code></pre>"},{"location":"reference/server/#methods","title":"Methods","text":""},{"location":"reference/server/#healthcheck","title":"healthcheck","text":"<p>Check if the MISP server is running and accessible.</p> <pre><code># Check server health\nhealth_status = misp.server.healthcheck()\nprint(f\"Server is healthy: {health_status['status'] == 'ok'}\")\n</code></pre> <p>Parameters: None</p> <p>Returns: - <code>dict</code>: A dictionary containing the server health status information.</p>"},{"location":"reference/server/#settings","title":"settings","text":"<p>Retrieve the current settings of the MISP server.</p> <pre><code># Get server settings\nserver_settings = misp.server.settings()\nprint(f\"MISP version: {server_settings['version']}\")\nprint(f\"Base URL: {server_settings['baseurl']}\")\n</code></pre> <p>Parameters: None</p> <p>Returns: - <code>dict</code>: A dictionary containing the server settings.</p>"},{"location":"reference/server/#version","title":"version","text":"<p>Get the version information of the MISP server.</p> <pre><code># Get MISP version information\nversion = misp.server.version()\nprint(f\"MISP version: {version['version']}\")\nprint(f\"PHP version: {version['php_version']}\")\nprint(f\"PyMISP version: {version['pymisp_version']}\")\n</code></pre> <p>Parameters: None</p> <p>Returns: - <code>dict</code>: A dictionary containing version information.</p>"},{"location":"reference/server/#use-cases","title":"Use Cases","text":""},{"location":"reference/server/#server-health-monitoring","title":"Server Health Monitoring","text":"<pre><code>def check_misp_health(misp_client):\n    \"\"\"Monitor the health of a MISP server.\"\"\"\n    try:\n        health = misp_client.server.healthcheck()\n        if health['status'] == 'ok':\n            print(\"MISP server is healthy\")\n            return True\n        else:\n            print(f\"MISP server health check failed: {health}\")\n            return False\n    except Exception as e:\n        print(f\"Error checking MISP server health: {e}\")\n        return False\n</code></pre>"},{"location":"reference/server/#version-compatibility-check","title":"Version Compatibility Check","text":"<pre><code>def check_version_compatibility(misp_client, min_version=\"2.4.0\"):\n    \"\"\"Check if the MISP server version is compatible.\"\"\"\n    try:\n        version_info = misp_client.server.version()\n        server_version = version_info['version']\n\n        # Simple version comparison (you might want to use packaging.version for proper comparison)\n        if server_version &gt;= min_version:\n            print(f\"MISP server version {server_version} is compatible\")\n            return True\n        else:\n            print(f\"MISP server version {server_version} is below minimum required {min_version}\")\n            return False\n    except Exception as e:\n        print(f\"Error checking MISP server version: {e}\")\n        return False\n</code></pre>"},{"location":"reference/sharing_groups/","title":"Sharing Groups Reference","text":"<p>The Sharing Groups API provides methods for retrieving and managing MISP sharing groups, which define custom sets of organizations for selective sharing of threat intelligence.</p>"},{"location":"reference/sharing_groups/#initialization","title":"Initialization","text":"<p>The <code>SharingGroupService</code> class is accessed through the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import MISP, SharingGroupCriteria, Distribution\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n\n# Access the sharing groups service\nsharing_group_service = misp.sharing_groups\n</code></pre>"},{"location":"reference/sharing_groups/#methods","title":"Methods","text":""},{"location":"reference/sharing_groups/#create","title":"create","text":"<p>Create a new sharing group.</p> <pre><code># Create a new sharing group\nsharing_group = misp.sharing_groups.create(\n    name=\"Financial Sector Group\",\n    description=\"Sharing group for financial sector organizations\",\n    releasability=\"TLP:AMBER\"\n)\n\n# Link organizations to the sharing group\norg1 = misp.organizations.get(name=\"ACME Bank\")\norg2 = misp.organizations.get(name=\"Financial CERT\")\nmisp.sharing_groups.link_organization(sharing_group, org1)\nmisp.sharing_groups.link_organization(sharing_group, org2)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>name</code> str Yes Sharing group name <code>description</code> str No Description of the sharing group <code>releasability</code> str No Releasability statement (e.g., TLP level) <code>active</code> bool No Whether the sharing group is active"},{"location":"reference/sharing_groups/#edit","title":"edit","text":"<p>Update an existing sharing group.</p> <pre><code># Update a sharing group\nsharing_group = misp.sharing_groups.edit(\n    sharing_group=sharing_group,\n    name=\"Updated Financial Sector Group\",\n    description=\"Updated description for financial sector sharing\",\n    releasability=\"TLP:RED\"\n)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>sharing_group</code> MISPSharingGroup Yes Sharing group to update <code>name</code> str No New sharing group name <code>description</code> str No New description <code>releasability</code> str No New releasability statement <code>active</code> bool No New active status"},{"location":"reference/sharing_groups/#get","title":"get","text":"<p>Retrieve a sharing group by criteria.</p> <pre><code># Get sharing group by name\nsharing_group = misp.sharing_groups.get(name=\"Financial Sector Group\")\n\n# Get sharing group by UUID\nsharing_group = misp.sharing_groups.get(uuid=\"a1b2c3d4-e5f6-7890-abcd-ef1234567890\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>name</code> str No Sharing group name <code>uuid</code> str No Sharing group UUID <code>**fields</code> Various No Other sharing group fields to match"},{"location":"reference/sharing_groups/#exists","title":"exists","text":"<p>Check if a sharing group exists.</p> <pre><code># Check if sharing group exists\nexists = misp.sharing_groups.exists(name=\"Financial Sector Group\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>name</code> str No Sharing group name <code>uuid</code> str No Sharing group UUID <code>**fields</code> Various No Other sharing group fields to match"},{"location":"reference/sharing_groups/#list","title":"list","text":"<p>List sharing groups based on criteria.</p> <pre><code># List all sharing groups\nfor sharing_group in misp.sharing_groups.list():\n    print(f\"Sharing Group: {sharing_group.name}\")\n\n# List sharing groups with a specific pattern\nfor sharing_group in misp.sharing_groups.list(filter=SharingGroupCriteria(pattern=\"CERT\")):\n    print(f\"CERT Sharing Group: {sharing_group.name}\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>filter</code> SharingGroupCriteria No Filter criteria"},{"location":"reference/sharing_groups/#link_organization","title":"link_organization","text":"<p>Link an organization to a sharing group.</p> <pre><code># Link an organization to a sharing group\norganization = misp.organizations.get(name=\"New Financial Org\")\nmisp.sharing_groups.link_organization(sharing_group, organization)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>sharing_group</code> MISPSharingGroup Yes Sharing group to modify <code>organization</code> MISPOrganisation Yes Organization to link <code>extend</code> bool No Whether the organization can extend the sharing group"},{"location":"reference/sharing_groups/#unlink_organization","title":"unlink_organization","text":"<p>Unlink an organization from a sharing group.</p> <pre><code># Unlink an organization from a sharing group\norganization = misp.organizations.get(name=\"Old Financial Org\")\nmisp.sharing_groups.unlink_organization(sharing_group, organization)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>sharing_group</code> MISPSharingGroup Yes Sharing group to modify <code>organization</code> MISPOrganisation Yes Organization to unlink"},{"location":"reference/sharing_groups/#using-sharing-groups","title":"Using Sharing Groups","text":"<p>Sharing groups are used when creating or updating events with a distribution level of <code>SHARING_GROUP</code>:</p> <pre><code># Get a sharing group\nsharing_group = misp.sharing_groups.get(name=\"Financial Sector Group\")\n\n# Create an event with the sharing group\nevent = misp.events.create(\n    info=\"Financial Sector Threat Intelligence\",\n    published=False,\n    distribution=Distribution.SHARING_GROUP,\n    sharing_group=sharing_group,\n    threat_level=ThreatLevel.MEDIUM,\n    analysis=Analysis.INITIAL,\n    organization=misp.organizations.get(name=\"ACME Bank\")\n)\n</code></pre>"},{"location":"reference/tags/","title":"Tags Reference","text":"<p>The Tags API provides methods for creating, retrieving, updating, and managing MISP tags, which are used to categorize and label events, attributes, and objects.</p>"},{"location":"reference/tags/#initialization","title":"Initialization","text":"<p>The <code>TagService</code> class is accessed through the MISP client:</p> <pre><code>import os\nfrom openmisp.sdk import MISP, TagCriteria\n\n# Initialize the MISP client\nmisp = MISP(\n    url=os.getenv(\"MISP_URL\"),\n    key=os.getenv(\"MISP_KEY\"),\n    ssl=False,  # Set to True in production environments\n)\n\n# Access the tags service\ntag_service = misp.tags\n</code></pre>"},{"location":"reference/tags/#methods","title":"Methods","text":""},{"location":"reference/tags/#create","title":"create","text":"<p>Create a new tag.</p> <pre><code># Create a new tag\ntag = misp.tags.create(name=\"tlp:amber\")\n\n# Create a tag with a specific color\ntag = misp.tags.create(name=\"internal:investigation\", colour=\"#00FF00\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>name</code> str Yes Tag name <code>colour</code> str No Hexadecimal color code"},{"location":"reference/tags/#edit","title":"edit","text":"<p>Update an existing tag.</p> <pre><code># Update a tag\ntag = misp.tags.edit(\n    tag=tag,\n    name=\"tlp:red\",\n    colour=\"#FF0000\"\n)\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>tag</code> MISPTag Yes Tag to update <code>name</code> str No New tag name <code>colour</code> str No New hexadecimal color code"},{"location":"reference/tags/#get","title":"get","text":"<p>Retrieve a tag by criteria.</p> <pre><code># Get tag by name\ntag = misp.tags.get(name=\"tlp:amber\")\n\n# Get tag from an event\ntag = misp.tags.get(from=event, name=\"tlp:amber\")\n\n# Get tag from an attribute\ntag = misp.tags.get(from=attribute, name=\"tlp:amber\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent, MISPObject, or MISPAttribute No Parent entity <code>name</code> str No Tag name <code>**fields</code> Various No Other tag fields to match"},{"location":"reference/tags/#exists","title":"exists","text":"<p>Check if a tag exists.</p> <pre><code># Check if tag exists\nexists = misp.tags.exists(name=\"tlp:amber\")\n\n# Check if tag exists in an event\nexists = misp.tags.exists(from=event, name=\"tlp:amber\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent, MISPObject, or MISPAttribute No Parent entity <code>name</code> str No Tag name <code>**fields</code> Various No Other tag fields to match"},{"location":"reference/tags/#list","title":"list","text":"<p>List tags based on criteria.</p> <pre><code># List all tags\nfor tag in misp.tags.list():\n    print(f\"Tag: {tag.name}\")\n\n# List tags with a specific pattern\nfor tag in misp.tags.list(filter=TagCriteria(pattern=\"tlp:\")):\n    print(f\"TLP Tag: {tag.name}\")\n\n# List tags in an event\nfor tag in misp.tags.list(from=event):\n    print(f\"Event Tag: {tag.name}\")\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>from</code> MISPEvent, MISPObject, or MISPAttribute No Parent entity <code>filter</code> TagCriteria No Filter criteria"},{"location":"reference/tags/#common-tag-namespaces","title":"Common Tag Namespaces","text":"<p>MISP supports several common tag namespaces:</p>"},{"location":"reference/tags/#traffic-light-protocol-tlp","title":"Traffic Light Protocol (TLP)","text":"<pre><code># TLP tags for information sharing restrictions\nmisp.tags.create(name=\"tlp:white\")   # No restrictions\nmisp.tags.create(name=\"tlp:green\")   # Limited disclosure\nmisp.tags.create(name=\"tlp:amber\")   # Limited disclosure, specific organizations\nmisp.tags.create(name=\"tlp:red\")     # Limited disclosure, specific individuals\n</code></pre>"},{"location":"reference/tags/#misp-taxonomy","title":"MISP Taxonomy","text":"<pre><code># MISP taxonomy tags\nmisp.tags.create(name=\"misp-galaxy:threat-actor=\\\"APT28\\\"\")\nmisp.tags.create(name=\"misp-galaxy:tool=\\\"Mimikatz\\\"\")\nmisp.tags.create(name=\"admiralty-scale:source-reliability=\\\"a\\\"\")\nmisp.tags.create(name=\"adversary:attribution=\\\"APT28\\\"\")\n</code></pre>"},{"location":"reference/tags/#custom-tags","title":"Custom Tags","text":"<pre><code># Custom organizational tags\nmisp.tags.create(name=\"internal:investigation\", colour=\"#00FF00\")\nmisp.tags.create(name=\"priority:high\", colour=\"#FF0000\")\nmisp.tags.create(name=\"status:ongoing\", colour=\"#FFFF00\")\n</code></pre>"}]}