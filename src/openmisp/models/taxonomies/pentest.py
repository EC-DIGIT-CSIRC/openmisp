"""Taxonomy model for pentest."""

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel


class PentestTaxonomyPredicate(str, Enum):
    APPROACH = "approach"
    SCAN = "scan"
    EXPLOIT = "exploit"
    POST_EXPLOITATION = "post_exploitation"
    WEB = "web"
    NETWORK = "network"
    SOCIAL_ENGINEERING = "social_engineering"
    VULNERABILITY = "vulnerability"


class PentestTaxonomyApproachEntry(str, Enum):
    BLACKBOX = "blackbox"
    GREYBOX = "greybox"
    WHITEBOX = "whitebox"
    VULNERABILITY_SCANNING = "vulnerability_scanning"
    REDTEAM = "redteam"


class PentestTaxonomyScanEntry(str, Enum):
    VERTICAL = "vertical"
    HORIZONTAL = "horizontal"
    NETWORK_SCAN = "network_scan"
    VULNERABILITY = "vulnerability"


class PentestTaxonomyExploitEntry(str, Enum):
    TYPE_CONFUSION = "type confusion"
    FORMAT_STRINGS = "format_strings"
    STACK_OVERFLOW = "stack_overflow"
    HEAP_OVERFLOW = "heap_overflow"
    HEAP_SPRAYING = "heap_spraying"
    FUZZING = "fuzzing"
    ROP = "ROP"
    NULL_POINTER_DEREFERENCE = "null_pointer_dereference"


class PentestTaxonomyPostExploitationEntry(str, Enum):
    PRIVILEGE_ESCALATION = "privilege_escalation"
    PIVOTING = "pivoting"
    PASSWORD_CRACKING = "password_cracking"
    PERSISTENCE = "persistence"
    DATA_EXFILTRATION = "data_exfiltration"


class PentestTaxonomyWebEntry(str, Enum):
    INJECTION = "injection"
    SQLI = "SQLi"
    NO_SQLI = "NoSQLi"
    XML_INJECTION = "XML injection"
    CSRF = "CSRF"
    SSRF = "SSRF"
    XSS = "XSS"
    FILE_INCLUSION = "file_inclusion"
    WEB_TREE_DISCOVERY = "web_tree_discovery"
    BRUTEFORCE = "bruteforce"
    FUZZING = "fuzzing"


class PentestTaxonomyNetworkEntry(str, Enum):
    SNIFFING = "sniffing"
    SPOOFING = "spoofing"
    MAN_IN_THE_MIDDLE = "man_in_the_middle"
    NETWORK_DISCOVERY = "network_discovery"


class PentestTaxonomySocialEngineeringEntry(str, Enum):
    PHISHING = "phishing"
    MALWARE = "malware"


class PentestTaxonomyVulnerabilityEntry(str, Enum):
    CWE = "CWE"
    CVE = "CVE"


class PentestTaxonomy(BaseModel):
    """Model for the pentest taxonomy."""

    namespace: str = "pentest"
    description: str = """Penetration test (pentest) classification."""
    version: int = 3
    exclusive: bool = False
    predicates: List[PentestTaxonomyPredicate] = []
    approach_entries: List[PentestTaxonomyApproachEntry] = []
    scan_entries: List[PentestTaxonomyScanEntry] = []
    exploit_entries: List[PentestTaxonomyExploitEntry] = []
    post_exploitation_entries: List[PentestTaxonomyPostExploitationEntry] = []
    web_entries: List[PentestTaxonomyWebEntry] = []
    network_entries: List[PentestTaxonomyNetworkEntry] = []
    social_engineering_entries: List[PentestTaxonomySocialEngineeringEntry] = []
    vulnerability_entries: List[PentestTaxonomyVulnerabilityEntry] = []

    @classmethod
    def get_tag(cls, predicate: str, entry: Optional[str] = None) -> str:
        """Get the full tag for a predicate and optional entry."""
        if entry:
            return f"{cls.namespace}:{predicate}='{entry}'"
        return f"{cls.namespace}:{predicate}"
