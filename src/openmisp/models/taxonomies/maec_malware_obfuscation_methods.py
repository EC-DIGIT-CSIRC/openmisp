"""Taxonomy model for maec-malware-obfuscation-methods."""

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel


class MaecMalwareObfuscationMethodsTaxonomyPredicate(str, Enum):
    MAEC_OBFUSCATION_METHODS = "maec-obfuscation-methods"


class MaecMalwareObfuscationMethodsTaxonomyMaecObfuscationMethodsEntry(str, Enum):
    PACKING = "packing"
    CODE_ENCRYPTION = "code-encryption"
    DEAD_CODE_INSERTION = "dead-code-insertion"
    ENTRY_POINT_OBFUSCATION = "entry-point-obfuscation"
    IMPORT_ADDRESS_TABLE_OBFUSCATION = "import-address-table-obfuscation"
    INTERLEAVING_CODE = "interleaving-code"
    SYMBOLIC_OBFUSCATION = "symbolic-obfuscation"
    STRING_OBFUSCATION = "string-obfuscation"
    SUBROUTINE_REORDERING = "subroutine-reordering"
    CODE_TRANSPOSITION = "code-transposition"
    INSTRUCTION_SUBSTITUTION = "instruction-substitution"
    REGISTER_REASSIGNMENT = "register-reassignment"


class MaecMalwareObfuscationMethodsTaxonomy(BaseModel):
    """Model for the maec-malware-obfuscation-methods taxonomy."""

    namespace: str = "maec-malware-obfuscation-methods"
    description: str = """Obfuscation methods used by malware based on MAEC 5.0"""
    version: int = 1
    exclusive: bool = False
    predicates: List[MaecMalwareObfuscationMethodsTaxonomyPredicate] = []
    maec_obfuscation_methods_entries: List[MaecMalwareObfuscationMethodsTaxonomyMaecObfuscationMethodsEntry] = []

    @classmethod
    def get_tag(cls, predicate: str, entry: Optional[str] = None) -> str:
        """Get the full tag for a predicate and optional entry."""
        if entry:
            return f"{cls.namespace}:{predicate}='{entry}'"
        return f"{cls.namespace}:{predicate}"
