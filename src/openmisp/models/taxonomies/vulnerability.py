"""Taxonomy model for vulnerability."""

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel


class VulnerabilityTaxonomyPredicate(str, Enum):
    SIGHTING = "sighting"
    EXPLOITABILITY = "exploitability"
    INFORMATION = "information"


class VulnerabilityTaxonomySightingEntry(str, Enum):
    SEEN = "seen"
    CONFIRMED = "confirmed"
    EXPLOITED = "exploited"
    PATCHED = "patched"
    NOT_EXPLOITED = "not-exploited"
    NOT_CONFIRMED = "not-confirmed"
    NOT_PATCHED = "not-patched"


class VulnerabilityTaxonomyExploitabilityEntry(str, Enum):
    INDUSTRIALISED = "industrialised"
    CUSTOMISED = "customised"
    DOCUMENTED = "documented"
    THEORETICAL = "theoretical"


class VulnerabilityTaxonomyInformationEntry(str, Enum):
    PO_C = "PoC"
    REMEDIATION = "remediation"
    ANNOTATION = "annotation"


class VulnerabilityTaxonomy(BaseModel):
    """Model for the vulnerability taxonomy."""

    namespace: str = "vulnerability"
    description: str = """A taxonomy for describing vulnerabilities (software, hardware, or social) on different scales or with additional available information."""
    version: int = 3
    exclusive: bool = False
    predicates: List[VulnerabilityTaxonomyPredicate] = []
    sighting_entries: List[VulnerabilityTaxonomySightingEntry] = []
    exploitability_entries: List[VulnerabilityTaxonomyExploitabilityEntry] = []
    information_entries: List[VulnerabilityTaxonomyInformationEntry] = []

    @classmethod
    def get_tag(cls, predicate: str, entry: Optional[str] = None) -> str:
        """Get the full tag for a predicate and optional entry."""
        if entry:
            return f"{cls.namespace}:{predicate}='{entry}'"
        return f"{cls.namespace}:{predicate}"
