"""Taxonomy model for ms-caro-malware."""

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel


class MsCaroMalwareTaxonomyPredicate(str, Enum):
    MALWARE_TYPE = "malware-type"
    MALWARE_PLATFORM = "malware-platform"


class MsCaroMalwareTaxonomyMalwareTypeEntry(str, Enum):
    ADWARE = "Adware"
    BACKDOOR = "Backdoor"
    BEHAVIOR = "Behavior"
    BROSWER_MODIFIER = "BroswerModifier"
    CONSTRUCTOR = "Constructor"
    DDO_S = "DDoS"
    DIALER = "Dialer"
    DO_S = "DoS"
    EXPLOIT = "Exploit"
    HACK_TOOL = "HackTool"
    JOKE = "Joke"
    MISLEADING = "Misleading"
    MONITORING_TOOL = "MonitoringTool"
    PROGRAM = "Program"
    PUA = "PUA"
    PWS = "PWS"
    RANSOM = "Ransom"
    REMOTE_ACCESS = "RemoteAccess"
    ROGUE = "Rogue"
    SETTINGS_MODIFIER = "SettingsModifier"
    SOFTWARE_BUNDLER = "SoftwareBundler"
    SPAMMER = "Spammer"
    SPOOFER = "Spoofer"
    SPYWARE = "Spyware"
    TOOL = "Tool"
    TROJAN = "Trojan"
    TROJAN_CLICKER = "TrojanClicker"
    TROJAN_DOWNLOADER = "TrojanDownloader"
    TROJAN_DROPPER = "TrojanDropper"
    TROJAN_NOTIFIER = "TrojanNotifier"
    TROJAN_PROXY = "TrojanProxy"
    TROJAN_SPY = "TrojanSpy"
    VIR_TOOL = "VirTool"
    VIRUS = "Virus"
    WORM = "Worm"


class MsCaroMalwareTaxonomyMalwarePlatformEntry(str, Enum):
    ANDROID_OS = "AndroidOS"
    DOS = "DOS"
    EPOC = "EPOC"
    FREE_BSD = "FreeBSD"
    I_PHONE_OS = "iPhoneOS"
    LINUX = "Linux"
    MAC_OS = "MacOS"
    MAC_OS_X = "MacOS_X"
    OS2 = "OS2"
    PALM = "Palm"
    SOLARIS = "Solaris"
    SUN_OS = "SunOS"
    SYMB_OS = "SymbOS"
    UNIX = "Unix"
    WIN16 = "Win16"
    WIN2_K = "Win2K"
    WIN32 = "Win32"
    WIN64 = "Win64"
    WIN95 = "Win95"
    WIN98 = "Win98"
    WIN_CE = "WinCE"
    WIN_NT = "WinNT"
    ABAP = "ABAP"
    ALISP = "ALisp"
    AMI_PRO = "AmiPro"
    ANSI = "ANSI"
    APPLE_SCRIPT = "AppleScript"
    ASP = "ASP"
    AUTO_IT = "AutoIt"
    BAS = "BAS"
    BAT = "BAT"
    COREL_SCRIPT = "CorelScript"
    HTA = "HTA"
    HTML = "HTML"
    INF = "INF"
    IRC = "IRC"
    JAVA = "Java"
    JS = "JS"
    LOGO = "LOGO"
    MPB = "MPB"
    MSH = "MSH"
    MSIL = "MSIL"
    PERL = "Perl"
    PHP = "PHP"
    PYTHON = "Python"
    SAP = "SAP"
    SH = "SH"
    VBA = "VBA"
    VBS = "VBS"
    WIN_BAT = "WinBAT"
    WIN_HLP = "WinHlp"
    WIN_REG = "WinREG"
    A97_M = "A97M"
    HE = "HE"
    O97_M = "O97M"
    PP97_M = "PP97M"
    V5_M = "V5M"
    W1_M = "W1M"
    W2_M = "W2M"
    W97_M = "W97M"
    WM = "WM"
    X97_M = "X97M"
    XF = "XF"
    XM = "XM"
    ASX = "ASX"
    HC = "HC"
    MIME = "MIME"
    NETWARE = "Netware"
    QT = "QT"
    SB = "SB"
    SWF = "SWF"
    TSQL = "TSQL"
    XML = "XML"


class MsCaroMalwareTaxonomy(BaseModel):
    """Model for the ms-caro-malware taxonomy."""

    namespace: str = "ms-caro-malware"
    description: str = """Malware Type and Platform classification based on Microsoft's implementation of the Computer Antivirus Research Organization (CARO) Naming Scheme and Malware Terminology. Based on https://www.microsoft.com/en-us/security/portal/mmpc/shared/malwarenaming.aspx, https://www.microsoft.com/security/portal/mmpc/shared/glossary.aspx, https://www.microsoft.com/security/portal/mmpc/shared/objectivecriteria.aspx, and http://www.caro.org/definitions/index.html. Malware families are extracted from Microsoft SIRs since 2008 based on https://www.microsoft.com/security/sir/archive/default.aspx and https://www.microsoft.com/en-us/security/portal/threat/threats.aspx. Note that SIRs do NOT include all Microsoft malware families."""
    version: int = 1
    exclusive: bool = False
    predicates: List[MsCaroMalwareTaxonomyPredicate] = []
    malware_type_entries: List[MsCaroMalwareTaxonomyMalwareTypeEntry] = []
    malware_platform_entries: List[MsCaroMalwareTaxonomyMalwarePlatformEntry] = []

    @classmethod
    def get_tag(cls, predicate: str, entry: Optional[str] = None) -> str:
        """Get the full tag for a predicate and optional entry."""
        if entry:
            return f"{cls.namespace}:{predicate}='{entry}'"
        return f"{cls.namespace}:{predicate}"
