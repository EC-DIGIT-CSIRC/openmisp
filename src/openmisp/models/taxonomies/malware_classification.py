"""Taxonomy model for malware_classification."""

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel


class MalwareClassificationTaxonomyPredicate(str, Enum):
    MALWARE_CATEGORY = "malware-category"
    OBFUSCATION_TECHNIQUE = "obfuscation-technique"
    PAYLOAD_CLASSIFICATION = "payload-classification"
    MEMORY_CLASSIFICATION = "memory-classification"


class MalwareClassificationTaxonomyMalwareCategoryEntry(str, Enum):
    VIRUS = "Virus"
    WORM = "Worm"
    TROJAN = "Trojan"
    RANSOMWARE = "Ransomware"
    ROOTKIT = "Rootkit"
    DOWNLOADER = "Downloader"
    ADWARE = "Adware"
    STALKERWARE = "Stalkerware"
    SPYWARE = "Spyware"
    ZOMBIEWARE = "Zombieware"
    BOTNET = "Botnet"


class MalwareClassificationTaxonomyObfuscationTechniqueEntry(str, Enum):
    NO_OBFUSCATION = "no-obfuscation"
    ENCRYPTION = "encryption"
    OLIGOMORPHISM = "oligomorphism"
    METAMORPHISM = "metamorphism"
    STEALTH = "stealth"
    ARMOURING = "armouring"
    TUNNELING = "tunneling"
    XOR = "XOR"
    BASE64 = "BASE64"
    ROT13 = "ROT13"


class MalwareClassificationTaxonomyPayloadClassificationEntry(str, Enum):
    NO_PAYLOAD = "no-payload"
    NON_DESTRUCTIVE = "non-destructive"
    DESTRUCTIVE = "destructive"
    DROPPER = "dropper"


class MalwareClassificationTaxonomyMemoryClassificationEntry(str, Enum):
    RESIDENT = "resident"
    TEMPORARY_RESIDENT = "temporary-resident"
    SWAPPING_MODE = "swapping-mode"
    NON_RESIDENT = "non-resident"
    USER_PROCESS = "user-process"
    KERNEL_PROCESS = "kernel-process"


class MalwareClassificationTaxonomy(BaseModel):
    """Model for the malware_classification taxonomy."""

    namespace: str = "malware_classification"
    description: str = """Classification based on different categories. Based on https://www.sans.org/reading-room/whitepapers/incident/malware-101-viruses-32848"""
    version: int = 3
    exclusive: bool = False
    predicates: List[MalwareClassificationTaxonomyPredicate] = []
    malware_category_entries: List[MalwareClassificationTaxonomyMalwareCategoryEntry] = []
    obfuscation_technique_entries: List[MalwareClassificationTaxonomyObfuscationTechniqueEntry] = []
    payload_classification_entries: List[MalwareClassificationTaxonomyPayloadClassificationEntry] = []
    memory_classification_entries: List[MalwareClassificationTaxonomyMemoryClassificationEntry] = []

    @classmethod
    def get_tag(cls, predicate: str, entry: Optional[str] = None) -> str:
        """Get the full tag for a predicate and optional entry."""
        if entry:
            return f"{cls.namespace}:{predicate}='{entry}'"
        return f"{cls.namespace}:{predicate}"
