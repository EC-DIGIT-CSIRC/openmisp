"""Taxonomy model for stealth_malware."""

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel


class StealthMalwareTaxonomyPredicate(str, Enum):
    TYPE = "type"


class StealthMalwareTaxonomyTypeEntry(str, Enum):
    T_0 = "0"
    I = "I"
    II = "II"
    III = "III"


class StealthMalwareTaxonomy(BaseModel):
    """Model for the stealth_malware taxonomy."""

    namespace: str = "stealth_malware"
    description: str = """Classification based on malware stealth techniques. Described in https://vxheaven.org/lib/pdf/Introducing%20Stealth%20Malware%20Taxonomy.pdf"""
    version: int = 1
    exclusive: bool = False
    predicates: List[StealthMalwareTaxonomyPredicate] = []
    type_entries: List[StealthMalwareTaxonomyTypeEntry] = []

    @classmethod
    def get_tag(cls, predicate: str, entry: Optional[str] = None) -> str:
        """Get the full tag for a predicate and optional entry."""
        if entry:
            return f"{cls.namespace}:{predicate}='{entry}'"
        return f"{cls.namespace}:{predicate}"
