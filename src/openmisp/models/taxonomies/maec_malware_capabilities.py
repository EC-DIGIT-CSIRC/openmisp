"""Taxonomy model for maec-malware-capabilities."""

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel


class MaecMalwareCapabilitiesTaxonomyPredicate(str, Enum):
    MAEC_MALWARE_CAPABILITY = "maec-malware-capability"


class MaecMalwareCapabilitiesTaxonomyMaecMalwareCapabilityEntry(str, Enum):
    ANTI_BEHAVIORAL_ANALYSIS = "anti-behavioral-analysis"
    ANTI_CODE_ANALYSIS = "anti-code-analysis"
    ANTI_DETECTION = "anti-detection"
    ANTI_REMOVAL = "anti-removal"
    AVAILABILITY_VIOLATION = "availability-violation"
    COLLECTION = "collection"
    COMMAND_AND_CONTROL = "command-and-control"
    DATA_THEFT = "data-theft"
    DESTRUCTION = "destruction"
    DISCOVERY = "discovery"
    EXFILTRATION = "exfiltration"
    FRAUD = "fraud"
    INFECTION_PROPAGATION = "infection-propagation"
    INTEGRITY_VIOLATION = "integrity-violation"
    MACHINE_ACCESS_CONTROL = "machine-access-control"
    PERSISTENCE = "persistence"
    PRIVILEGE_ESCALATION = "privilege-escalation"
    SECONDARY_OPERATION = "secondary-operation"
    SECURITY_DEGRADATION = "security-degradation"
    ACCESS_CONTROL_DEGRADATION = "access-control-degradation"
    ANTI_DEBUGGING = "anti-debugging"
    ANTI_DISASSEMBLY = "anti-disassembly"
    ANTI_EMULATION = "anti-emulation"
    ANTI_MEMORY_FORENSICS = "anti-memory-forensics"
    ANTI_SANDBOX = "anti-sandbox"
    ANTI_VIRUS_EVASION = "anti-virus-evasion"
    ANTI_VM = "anti-vm"
    AUTHENTICATION_CREDENTIALS_THEFT = "authentication-credentials-theft"
    CLEAN_TRACES_OF_INFECTION = "clean-traces-of-infection"
    COMMUNICATE_WITH_C2_SERVER = "communicate-with-c2-server"
    COMPROMISE_DATA_AVAILABILITY = "compromise-data-availability"
    COMPROMISE_SYSTEM_AVAILABILITY = "compromise-system-availability"
    CONSUME_SYSTEM_RESOURCES = "consume-system-resources"
    CONTINUOUS_EXECUTION = "continuous-execution"
    DATA_INTEGRITY_VIOLATION = "data-integrity-violation"
    DATA_OBFUSCATION = "data-obfuscation"
    DATA_STAGING = "data-staging"
    DETERMINE_C2_SERVER = "determine-c2-server"
    EMAIL_SPAM = "email-spam"
    ENSURE_COMPATIBILITY = "ensure-compatibility"
    ENVIRONMENT_AWARENESS = "environment-awareness"
    FILE_INFECTION = "file-infection"
    HIDE_ARTIFACTS = "hide-artifacts"
    HIDE_EXECUTING_CODE = "hide-executing-code"
    HIDE_NON_EXECUTING_CODE = "hide-non-executing-code"
    HOST_CONFIGURATION_PROBING = "host-configuration-probing"
    INFORMATION_GATHERING_FOR_IMPROVEMENT = "information-gathering-for-improvement"
    INPUT_PERIPHERAL_CAPTURE = "input-peripheral-capture"
    INSTALL_OTHER_COMPONENTS = "install-other-components"
    LOCAL_MACHINE_CONTROL = "local-machine-control"
    NETWORK_ENVIRONMENT_PROBING = "network-environment-probing"
    OS_SECURITY_FEATURE_DEGRADATION = "os-security-feature-degradation"
    OUTPUT_PERIPHERAL_CAPTURE = "output-peripheral-capture"
    PHYSICAL_ENTITY_DESTRUCTION = "physical-entity-destruction"
    PREVENT_ARTIFACT_ACCESS = "prevent-artifact-access"
    PREVENT_ARTIFACT_DELETION = "prevent-artifact-deletion"
    REMOTE_MACHINE_ACCESS = "remote-machine-access"
    SECURITY_SOFTWARE_DEGRADATION = "security-software-degradation"
    SECURITY_SOFTWARE_EVASION = "security-software-evasion"
    SELF_MODIFICATION = "self-modification"
    SERVICE_PROVIDER_SECURITY_FEATURE_DEGRADATION = "service-provider-security-feature-degradation"
    STORED_INFORMATION_THEFT = "stored-information-theft"
    SYSTEM_INTERFACE_DATA_CAPTURE = "system-interface-data-capture"
    SYSTEM_OPERATIONAL_INTEGRITY_VIOLATION = "system-operational-integrity-violation"
    SYSTEM_RE_INFECTION = "system-re-infection"
    SYSTEM_STATE_DATA_CAPTURE = "system-state-data-capture"
    SYSTEM_UPDATE_DEGRADATION = "system-update-degradation"
    USER_DATA_THEFT = "user-data-theft"
    VIRTUAL_ENTITY_DESTRUCTION = "virtual-entity-destruction"


class MaecMalwareCapabilitiesTaxonomy(BaseModel):
    """Model for the maec-malware-capabilities taxonomy."""

    namespace: str = "maec-malware-capabilities"
    description: str = """Malware Capabilities based on MAEC 5.0"""
    version: int = 2
    exclusive: bool = False
    predicates: List[MaecMalwareCapabilitiesTaxonomyPredicate] = []
    maec_malware_capability_entries: List[MaecMalwareCapabilitiesTaxonomyMaecMalwareCapabilityEntry] = []

    @classmethod
    def get_tag(cls, predicate: str, entry: Optional[str] = None) -> str:
        """Get the full tag for a predicate and optional entry."""
        if entry:
            return f"{cls.namespace}:{predicate}='{entry}'"
        return f"{cls.namespace}:{predicate}"
